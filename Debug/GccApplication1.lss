
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c0  00800060  00001b6a  00001bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a9  00800220  00800220  00001dbe  2**0
                  ALLOC
  3 .stab         00003b10  00000000  00000000  00001dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ec7  00000000  00000000  000058d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006798  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019b0  00000000  00000000  00006918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077b  00000000  00000000  000082c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d65  00000000  00000000  00008a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004dc  00000000  00000000  000097a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c4  00000000  00000000  00009c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001294  00000000  00000000  0000a448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000b6dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__vector_11>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	05 a8       	sts	0x85, r16
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <ESP8266_Start+0x102>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	sts	0x96, r26
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d4 e0       	ldi	r29, 0x04	; 4
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	12 e0       	ldi	r17, 0x02	; 2
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	ea e6       	ldi	r30, 0x6A	; 106
      86:	fb e1       	ldi	r31, 0x1B	; 27
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a0 32       	cpi	r26, 0x20	; 32
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	12 e0       	ldi	r17, 0x02	; 2
      96:	a0 e2       	ldi	r26, 0x20	; 32
      98:	b2 e0       	ldi	r27, 0x02	; 2
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a9 3c       	cpi	r26, 0xC9	; 201
      a0:	b1 07       	cpc	r27, r17
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <main>
      a8:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <LCD_Command>:
uint32_t TimeOut = 0;
char RESPONSE_BUFFER[DEFAULT_BUFFER_SIZE];

void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
      b0:	98 b3       	in	r25, 0x18	; 24
      b2:	28 2f       	mov	r18, r24
      b4:	20 7f       	andi	r18, 0xF0	; 240
      b6:	9f 70       	andi	r25, 0x0F	; 15
      b8:	92 2b       	or	r25, r18
      ba:	98 bb       	out	0x18, r25	; 24
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
      bc:	c0 98       	cbi	0x18, 0	; 24
	LCD_Port |= (1<<EN);		/* Enable pulse */
      be:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c0:	95 e0       	ldi	r25, 0x05	; 5
      c2:	9a 95       	dec	r25
      c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_Command+0x12>
      c6:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
      c8:	c1 98       	cbi	0x18, 1	; 24
      ca:	ef e1       	ldi	r30, 0x1F	; 31
      cc:	f3 e0       	ldi	r31, 0x03	; 3
      ce:	31 97       	sbiw	r30, 0x01	; 1
      d0:	f1 f7       	brne	.-4      	; 0xce <LCD_Command+0x1e>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_Command+0x24>
      d4:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
      d6:	98 b3       	in	r25, 0x18	; 24
      d8:	82 95       	swap	r24
      da:	80 7f       	andi	r24, 0xF0	; 240
      dc:	9f 70       	andi	r25, 0x0F	; 15
      de:	89 2b       	or	r24, r25
      e0:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
      e2:	c1 9a       	sbi	0x18, 1	; 24
      e4:	f5 e0       	ldi	r31, 0x05	; 5
      e6:	fa 95       	dec	r31
      e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_Command+0x36>
      ea:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
      ec:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ee:	8f e3       	ldi	r24, 0x3F	; 63
      f0:	9f e1       	ldi	r25, 0x1F	; 31
      f2:	01 97       	sbiw	r24, 0x01	; 1
      f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_Command+0x42>
      f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_Command+0x48>
      f8:	00 00       	nop
	_delay_ms(2);
}
      fa:	08 95       	ret

000000fc <LCD_Char>:
void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
      fc:	98 b3       	in	r25, 0x18	; 24
      fe:	28 2f       	mov	r18, r24
     100:	20 7f       	andi	r18, 0xF0	; 240
     102:	9f 70       	andi	r25, 0x0F	; 15
     104:	92 2b       	or	r25, r18
     106:	98 bb       	out	0x18, r25	; 24
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
     108:	c0 9a       	sbi	0x18, 0	; 24
	LCD_Port|= (1<<EN);
     10a:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     10c:	95 e0       	ldi	r25, 0x05	; 5
     10e:	9a 95       	dec	r25
     110:	f1 f7       	brne	.-4      	; 0x10e <LCD_Char+0x12>
     112:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     114:	c1 98       	cbi	0x18, 1	; 24
     116:	ef e1       	ldi	r30, 0x1F	; 31
     118:	f3 e0       	ldi	r31, 0x03	; 3
     11a:	31 97       	sbiw	r30, 0x01	; 1
     11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_Char+0x1e>
     11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_Char+0x24>
     120:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
     122:	98 b3       	in	r25, 0x18	; 24
     124:	82 95       	swap	r24
     126:	80 7f       	andi	r24, 0xF0	; 240
     128:	9f 70       	andi	r25, 0x0F	; 15
     12a:	89 2b       	or	r24, r25
     12c:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
     12e:	c1 9a       	sbi	0x18, 1	; 24
     130:	f5 e0       	ldi	r31, 0x05	; 5
     132:	fa 95       	dec	r31
     134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Char+0x36>
     136:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     138:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     13a:	8f e3       	ldi	r24, 0x3F	; 63
     13c:	9f e1       	ldi	r25, 0x1F	; 31
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	f1 f7       	brne	.-4      	; 0x13e <LCD_Char+0x42>
     142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_Char+0x48>
     144:	00 00       	nop
	_delay_ms(2);
}
     146:	08 95       	ret

00000148 <LCD_Init>:
void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
     148:	8f ef       	ldi	r24, 0xFF	; 255
     14a:	87 bb       	out	0x17, r24	; 23
     14c:	8f ef       	ldi	r24, 0xFF	; 255
     14e:	99 ef       	ldi	r25, 0xF9	; 249
     150:	a0 e0       	ldi	r26, 0x00	; 0
     152:	81 50       	subi	r24, 0x01	; 1
     154:	90 40       	sbci	r25, 0x00	; 0
     156:	a0 40       	sbci	r26, 0x00	; 0
     158:	e1 f7       	brne	.-8      	; 0x152 <LCD_Init+0xa>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_Init+0x14>
     15c:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
     15e:	82 e0       	ldi	r24, 0x02	; 2
     160:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
     164:	88 e2       	ldi	r24, 0x28	; 40
     166:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
     16a:	8c e0       	ldi	r24, 0x0C	; 12
     16c:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
     170:	86 e0       	ldi	r24, 0x06	; 6
     172:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Command>
     17c:	af e3       	ldi	r26, 0x3F	; 63
     17e:	bf e1       	ldi	r27, 0x1F	; 31
     180:	11 97       	sbiw	r26, 0x01	; 1
     182:	f1 f7       	brne	.-4      	; 0x180 <LCD_Init+0x38>
     184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_Init+0x3e>
     186:	00 00       	nop
	_delay_ms(2);
}
     188:	08 95       	ret

0000018a <LCD_String>:
void LCD_String (char *str)		/* Send string to LCD function */
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
     190:	88 81       	ld	r24, Y
     192:	88 23       	and	r24, r24
     194:	31 f0       	breq	.+12     	; 0x1a2 <LCD_String+0x18>
	LCD_Command(0x0c);              /* Display on cursor off*/
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
	LCD_Command(0x01);              /* Clear display screen*/
	_delay_ms(2);
}
void LCD_String (char *str)		/* Send string to LCD function */
     196:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);
     198:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_Char>
	_delay_ms(2);
}
void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
     19c:	89 91       	ld	r24, Y+
     19e:	88 23       	and	r24, r24
     1a0:	d9 f7       	brne	.-10     	; 0x198 <LCD_String+0xe>
	{
		LCD_Char (str[i]);
	}
}
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <LCD_String_xy>:
void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
     1ae:	88 23       	and	r24, r24
     1b0:	41 f4       	brne	.+16     	; 0x1c2 <LCD_String_xy+0x1a>
     1b2:	60 31       	cpi	r22, 0x10	; 16
     1b4:	78 f4       	brcc	.+30     	; 0x1d4 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
     1b6:	86 2f       	mov	r24, r22
     1b8:	8f 70       	andi	r24, 0x0F	; 15
     1ba:	80 68       	ori	r24, 0x80	; 128
     1bc:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Command>
     1c0:	09 c0       	rjmp	.+18     	; 0x1d4 <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	39 f4       	brne	.+14     	; 0x1d4 <LCD_String_xy+0x2c>
     1c6:	60 31       	cpi	r22, 0x10	; 16
     1c8:	28 f4       	brcc	.+10     	; 0x1d4 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
     1ca:	86 2f       	mov	r24, r22
     1cc:	8f 70       	andi	r24, 0x0F	; 15
     1ce:	80 6c       	ori	r24, 0xC0	; 192
     1d0:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
     1d4:	ce 01       	movw	r24, r28
     1d6:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_String>
}
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	08 95       	ret

000001e0 <LCD_Clear>:
void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Command>
     1e6:	8f e3       	ldi	r24, 0x3F	; 63
     1e8:	9f e1       	ldi	r25, 0x1F	; 31
     1ea:	01 97       	sbiw	r24, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_Clear+0xa>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_Clear+0x10>
     1f0:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
     1f2:	80 e8       	ldi	r24, 0x80	; 128
     1f4:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Command>
}
     1f8:	08 95       	ret

000001fa <Read_Response>:
void Read_Response(char* _Expected_Response)
{
     1fa:	2f 92       	push	r2
     1fc:	3f 92       	push	r3
     1fe:	4f 92       	push	r4
     200:	5f 92       	push	r5
     202:	6f 92       	push	r6
     204:	7f 92       	push	r7
     206:	8f 92       	push	r8
     208:	9f 92       	push	r9
     20a:	af 92       	push	r10
     20c:	bf 92       	push	r11
     20e:	cf 92       	push	r12
     210:	df 92       	push	r13
     212:	ef 92       	push	r14
     214:	ff 92       	push	r15
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	60 97       	sbiw	r28, 0x10	; 16
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	de bf       	out	0x3e, r29	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	8f 83       	std	Y+7, r24	; 0x07
     230:	98 87       	std	Y+8, r25	; 0x08
			}
		}
		_delay_ms(1);
		TimeCount++;
	}
}
     232:	2d b7       	in	r18, 0x3d	; 61
     234:	3e b7       	in	r19, 0x3e	; 62
     236:	3c 87       	std	Y+12, r19	; 0x0c
     238:	2b 87       	std	Y+11, r18	; 0x0b
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
}
void Read_Response(char* _Expected_Response)
{
	uint8_t EXPECTED_RESPONSE_LENGTH = strlen(_Expected_Response);
     23a:	e8 2f       	mov	r30, r24
     23c:	f9 2f       	mov	r31, r25
     23e:	df 01       	movw	r26, r30
     240:	0d 90       	ld	r0, X+
     242:	00 20       	and	r0, r0
     244:	e9 f7       	brne	.-6      	; 0x240 <Read_Response+0x46>
     246:	cd 01       	movw	r24, r26
     248:	01 97       	sbiw	r24, 0x01	; 1
     24a:	8e 1b       	sub	r24, r30
	uint32_t TimeCount = 0, ResponseBufferLength;
	char RECEIVED_CRLF_BUF[EXPECTED_RESPONSE_LENGTH];
     24c:	08 2f       	mov	r16, r24
     24e:	10 e0       	ldi	r17, 0x00	; 0
     250:	ed b7       	in	r30, 0x3d	; 61
     252:	fe b7       	in	r31, 0x3e	; 62
     254:	e0 1b       	sub	r30, r16
     256:	f1 0b       	sbc	r31, r17
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	fe bf       	out	0x3e, r31	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	ed bf       	out	0x3d, r30	; 61
     262:	2d b6       	in	r2, 0x3d	; 61
     264:	3e b6       	in	r3, 0x3e	; 62
     266:	08 94       	sec
     268:	21 1c       	adc	r2, r1
     26a:	31 1c       	adc	r3, r1

	while(1)
	{
		if(TimeCount >= (DEFAULT_TIMEOUT+TimeOut))
     26c:	40 91 20 02 	lds	r20, 0x0220
     270:	50 91 21 02 	lds	r21, 0x0221
     274:	60 91 22 02 	lds	r22, 0x0222
     278:	70 91 23 02 	lds	r23, 0x0223
     27c:	40 3f       	cpi	r20, 0xF0	; 240
     27e:	f8 ed       	ldi	r31, 0xD8	; 216
     280:	5f 07       	cpc	r21, r31
     282:	ff ef       	ldi	r31, 0xFF	; 255
     284:	6f 07       	cpc	r22, r31
     286:	ff ef       	ldi	r31, 0xFF	; 255
     288:	7f 07       	cpc	r23, r31
     28a:	61 f4       	brne	.+24     	; 0x2a4 <Read_Response+0xaa>
		{
			TimeOut = 0;
     28c:	10 92 20 02 	sts	0x0220, r1
     290:	10 92 21 02 	sts	0x0221, r1
     294:	10 92 22 02 	sts	0x0222, r1
     298:	10 92 23 02 	sts	0x0223, r1
			Response_Status = ESP8266_RESPONSE_TIMEOUT;
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	80 93 c8 02 	sts	0x02C8, r24
     2a2:	aa c0       	rjmp	.+340    	; 0x3f8 <Read_Response+0x1fe>
	LCD_Command (0x80);		/* Cursor at home position */
}
void Read_Response(char* _Expected_Response)
{
	uint8_t EXPECTED_RESPONSE_LENGTH = strlen(_Expected_Response);
	uint32_t TimeCount = 0, ResponseBufferLength;
     2a4:	44 24       	eor	r4, r4
     2a6:	55 24       	eor	r5, r5
     2a8:	32 01       	movw	r6, r4
			TimeCount++;
			if (ResponseBufferLength==strlen(RESPONSE_BUFFER))
			{
				for (uint16_t i=0;i<ResponseBufferLength;i++)
				{
					memmove(RECEIVED_CRLF_BUF, RECEIVED_CRLF_BUF + 1, EXPECTED_RESPONSE_LENGTH-1);
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	01 97       	sbiw	r24, 0x01	; 1
					RECEIVED_CRLF_BUF[EXPECTED_RESPONSE_LENGTH-1] = RESPONSE_BUFFER[i];
     2ae:	91 01       	movw	r18, r2
     2b0:	28 0f       	add	r18, r24
     2b2:	39 1f       	adc	r19, r25
     2b4:	3a 83       	std	Y+2, r19	; 0x02
     2b6:	29 83       	std	Y+1, r18	; 0x01
			TimeCount++;
			if (ResponseBufferLength==strlen(RESPONSE_BUFFER))
			{
				for (uint16_t i=0;i<ResponseBufferLength;i++)
				{
					memmove(RECEIVED_CRLF_BUF, RECEIVED_CRLF_BUF + 1, EXPECTED_RESPONSE_LENGTH-1);
     2b8:	89 87       	std	Y+9, r24	; 0x09
     2ba:	9a 87       	std	Y+10, r25	; 0x0a
     2bc:	c1 01       	movw	r24, r2
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	9c 83       	std	Y+4, r25	; 0x04
     2c2:	8b 83       	std	Y+3, r24	; 0x03
     2c4:	1e 83       	std	Y+6, r17	; 0x06
     2c6:	0d 83       	std	Y+5, r16	; 0x05
			TimeOut = 0;
			Response_Status = ESP8266_RESPONSE_TIMEOUT;
			return;
		}

		if(Response_Status == ESP8266_RESPONSE_STARTING)
     2c8:	80 91 c8 02 	lds	r24, 0x02C8
     2cc:	84 30       	cpi	r24, 0x04	; 4
     2ce:	11 f4       	brne	.+4      	; 0x2d4 <Read_Response+0xda>
		{
			Response_Status = ESP8266_RESPONSE_WAITING;
     2d0:	10 92 c8 02 	sts	0x02C8, r1
		}

		ResponseBufferLength = strlen(RESPONSE_BUFFER);
     2d4:	e8 e2       	ldi	r30, 0x28	; 40
     2d6:	f2 e0       	ldi	r31, 0x02	; 2
     2d8:	01 90       	ld	r0, Z+
     2da:	00 20       	and	r0, r0
     2dc:	e9 f7       	brne	.-6      	; 0x2d8 <Read_Response+0xde>
     2de:	31 97       	sbiw	r30, 0x01	; 1
     2e0:	e8 52       	subi	r30, 0x28	; 40
     2e2:	f2 40       	sbci	r31, 0x02	; 2
     2e4:	cf 01       	movw	r24, r30
     2e6:	a0 e0       	ldi	r26, 0x00	; 0
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
		if (ResponseBufferLength)
     2ea:	00 97       	sbiw	r24, 0x00	; 0
     2ec:	a1 05       	cpc	r26, r1
     2ee:	b1 05       	cpc	r27, r1
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <Read_Response+0xfa>
     2f2:	64 c0       	rjmp	.+200    	; 0x3bc <Read_Response+0x1c2>
     2f4:	ef e9       	ldi	r30, 0x9F	; 159
     2f6:	ff e0       	ldi	r31, 0x0F	; 15
     2f8:	31 97       	sbiw	r30, 0x01	; 1
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <Read_Response+0xfe>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <Read_Response+0x104>
     2fe:	00 00       	nop
		{
			_delay_ms(1);
			TimeCount++;
     300:	08 94       	sec
     302:	41 1c       	adc	r4, r1
     304:	51 1c       	adc	r5, r1
     306:	61 1c       	adc	r6, r1
     308:	71 1c       	adc	r7, r1
			if (ResponseBufferLength==strlen(RESPONSE_BUFFER))
     30a:	e8 e2       	ldi	r30, 0x28	; 40
     30c:	f2 e0       	ldi	r31, 0x02	; 2
     30e:	01 90       	ld	r0, Z+
     310:	00 20       	and	r0, r0
     312:	e9 f7       	brne	.-6      	; 0x30e <Read_Response+0x114>
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	e8 52       	subi	r30, 0x28	; 40
     318:	f2 40       	sbci	r31, 0x02	; 2
     31a:	4f 01       	movw	r8, r30
     31c:	aa 24       	eor	r10, r10
     31e:	bb 24       	eor	r11, r11
     320:	88 16       	cp	r8, r24
     322:	99 06       	cpc	r9, r25
     324:	aa 06       	cpc	r10, r26
     326:	bb 06       	cpc	r11, r27
     328:	09 f0       	breq	.+2      	; 0x32c <Read_Response+0x132>
     32a:	48 c0       	rjmp	.+144    	; 0x3bc <Read_Response+0x1c2>
			{
				for (uint16_t i=0;i<ResponseBufferLength;i++)
     32c:	81 14       	cp	r8, r1
     32e:	91 04       	cpc	r9, r1
     330:	a1 04       	cpc	r10, r1
     332:	b1 04       	cpc	r11, r1
     334:	09 f4       	brne	.+2      	; 0x338 <Read_Response+0x13e>
     336:	42 c0       	rjmp	.+132    	; 0x3bc <Read_Response+0x1c2>
     338:	08 e2       	ldi	r16, 0x28	; 40
     33a:	12 e0       	ldi	r17, 0x02	; 2
     33c:	cc 24       	eor	r12, r12
     33e:	dd 24       	eor	r13, r13
     340:	76 01       	movw	r14, r12
     342:	4d 86       	std	Y+13, r4	; 0x0d
     344:	5e 86       	std	Y+14, r5	; 0x0e
     346:	6f 86       	std	Y+15, r6	; 0x0f
     348:	78 8a       	std	Y+16, r7	; 0x10
     34a:	5f 80       	ldd	r5, Y+7	; 0x07
     34c:	68 84       	ldd	r6, Y+8	; 0x08
     34e:	79 84       	ldd	r7, Y+9	; 0x09
     350:	4a 84       	ldd	r4, Y+10	; 0x0a
				{
					memmove(RECEIVED_CRLF_BUF, RECEIVED_CRLF_BUF + 1, EXPECTED_RESPONSE_LENGTH-1);
     352:	82 2d       	mov	r24, r2
     354:	93 2d       	mov	r25, r3
     356:	6b 81       	ldd	r22, Y+3	; 0x03
     358:	7c 81       	ldd	r23, Y+4	; 0x04
     35a:	47 2d       	mov	r20, r7
     35c:	54 2d       	mov	r21, r4
     35e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <memmove>
					RECEIVED_CRLF_BUF[EXPECTED_RESPONSE_LENGTH-1] = RESPONSE_BUFFER[i];
     362:	d8 01       	movw	r26, r16
     364:	8d 91       	ld	r24, X+
     366:	8d 01       	movw	r16, r26
     368:	e9 81       	ldd	r30, Y+1	; 0x01
     36a:	fa 81       	ldd	r31, Y+2	; 0x02
     36c:	80 83       	st	Z, r24
					if(!strncmp(RECEIVED_CRLF_BUF, _Expected_Response, EXPECTED_RESPONSE_LENGTH))
     36e:	82 2d       	mov	r24, r2
     370:	93 2d       	mov	r25, r3
     372:	65 2d       	mov	r22, r5
     374:	76 2d       	mov	r23, r6
     376:	4d 81       	ldd	r20, Y+5	; 0x05
     378:	5e 81       	ldd	r21, Y+6	; 0x06
     37a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <strncmp>
     37e:	28 2f       	mov	r18, r24
     380:	39 2f       	mov	r19, r25
     382:	21 15       	cp	r18, r1
     384:	31 05       	cpc	r19, r1
     386:	61 f4       	brne	.+24     	; 0x3a0 <Read_Response+0x1a6>
					{
						TimeOut = 0;
     388:	10 92 20 02 	sts	0x0220, r1
     38c:	10 92 21 02 	sts	0x0221, r1
     390:	10 92 22 02 	sts	0x0222, r1
     394:	10 92 23 02 	sts	0x0223, r1
						Response_Status = ESP8266_RESPONSE_FINISHED;
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	80 93 c8 02 	sts	0x02C8, r24
     39e:	2c c0       	rjmp	.+88     	; 0x3f8 <Read_Response+0x1fe>
     3a0:	08 94       	sec
     3a2:	c1 1c       	adc	r12, r1
     3a4:	d1 1c       	adc	r13, r1
     3a6:	e1 1c       	adc	r14, r1
     3a8:	f1 1c       	adc	r15, r1
		{
			_delay_ms(1);
			TimeCount++;
			if (ResponseBufferLength==strlen(RESPONSE_BUFFER))
			{
				for (uint16_t i=0;i<ResponseBufferLength;i++)
     3aa:	8c 14       	cp	r8, r12
     3ac:	9d 04       	cpc	r9, r13
     3ae:	ae 04       	cpc	r10, r14
     3b0:	bf 04       	cpc	r11, r15
     3b2:	79 f6       	brne	.-98     	; 0x352 <Read_Response+0x158>
     3b4:	4d 84       	ldd	r4, Y+13	; 0x0d
     3b6:	5e 84       	ldd	r5, Y+14	; 0x0e
     3b8:	6f 84       	ldd	r6, Y+15	; 0x0f
     3ba:	78 88       	ldd	r7, Y+16	; 0x10
     3bc:	8f e9       	ldi	r24, 0x9F	; 159
     3be:	9f e0       	ldi	r25, 0x0F	; 15
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <Read_Response+0x1c6>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <Read_Response+0x1cc>
     3c6:	00 00       	nop
					}
				}
			}
		}
		_delay_ms(1);
		TimeCount++;
     3c8:	08 94       	sec
     3ca:	41 1c       	adc	r4, r1
     3cc:	51 1c       	adc	r5, r1
     3ce:	61 1c       	adc	r6, r1
     3d0:	71 1c       	adc	r7, r1
	uint32_t TimeCount = 0, ResponseBufferLength;
	char RECEIVED_CRLF_BUF[EXPECTED_RESPONSE_LENGTH];

	while(1)
	{
		if(TimeCount >= (DEFAULT_TIMEOUT+TimeOut))
     3d2:	80 91 20 02 	lds	r24, 0x0220
     3d6:	90 91 21 02 	lds	r25, 0x0221
     3da:	a0 91 22 02 	lds	r26, 0x0222
     3de:	b0 91 23 02 	lds	r27, 0x0223
     3e2:	80 5f       	subi	r24, 0xF0	; 240
     3e4:	98 4d       	sbci	r25, 0xD8	; 216
     3e6:	af 4f       	sbci	r26, 0xFF	; 255
     3e8:	bf 4f       	sbci	r27, 0xFF	; 255
     3ea:	48 16       	cp	r4, r24
     3ec:	59 06       	cpc	r5, r25
     3ee:	6a 06       	cpc	r6, r26
     3f0:	7b 06       	cpc	r7, r27
     3f2:	08 f4       	brcc	.+2      	; 0x3f6 <Read_Response+0x1fc>
     3f4:	69 cf       	rjmp	.-302    	; 0x2c8 <Read_Response+0xce>
     3f6:	4a cf       	rjmp	.-364    	; 0x28c <Read_Response+0x92>
			}
		}
		_delay_ms(1);
		TimeCount++;
	}
}
     3f8:	ab 85       	ldd	r26, Y+11	; 0x0b
     3fa:	bc 85       	ldd	r27, Y+12	; 0x0c
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	be bf       	out	0x3e, r27	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	ad bf       	out	0x3d, r26	; 61
     406:	60 96       	adiw	r28, 0x10	; 16
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	cf 90       	pop	r12
     422:	bf 90       	pop	r11
     424:	af 90       	pop	r10
     426:	9f 90       	pop	r9
     428:	8f 90       	pop	r8
     42a:	7f 90       	pop	r7
     42c:	6f 90       	pop	r6
     42e:	5f 90       	pop	r5
     430:	4f 90       	pop	r4
     432:	3f 90       	pop	r3
     434:	2f 90       	pop	r2
     436:	08 95       	ret

00000438 <ESP8266_Clear>:

void ESP8266_Clear()
{
	memset(RESPONSE_BUFFER,0,DEFAULT_BUFFER_SIZE);
     438:	80 ea       	ldi	r24, 0xA0	; 160
     43a:	e8 e2       	ldi	r30, 0x28	; 40
     43c:	f2 e0       	ldi	r31, 0x02	; 2
     43e:	df 01       	movw	r26, r30
     440:	1d 92       	st	X+, r1
     442:	8a 95       	dec	r24
     444:	e9 f7       	brne	.-6      	; 0x440 <ESP8266_Clear+0x8>
	Counter = 0;	pointer = 0;
     446:	10 92 27 02 	sts	0x0227, r1
     44a:	10 92 26 02 	sts	0x0226, r1
     44e:	10 92 25 02 	sts	0x0225, r1
     452:	10 92 24 02 	sts	0x0224, r1
}
     456:	08 95       	ret

00000458 <Start_Read_Response>:

void Start_Read_Response(char* _ExpectedResponse)
{
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
	Response_Status = ESP8266_RESPONSE_STARTING;
     45e:	84 e0       	ldi	r24, 0x04	; 4
     460:	80 93 c8 02 	sts	0x02C8, r24
	do {
		Read_Response(_ExpectedResponse);
     464:	ce 01       	movw	r24, r28
     466:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Read_Response>
	} while(Response_Status == ESP8266_RESPONSE_WAITING);
     46a:	80 91 c8 02 	lds	r24, 0x02C8
     46e:	88 23       	and	r24, r24
     470:	c9 f3       	breq	.-14     	; 0x464 <__stack+0x5>

}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <GetResponseBody>:

void GetResponseBody(char* Response, uint16_t ResponseLength)
{
     478:	cf 92       	push	r12
     47a:	df 92       	push	r13
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	00 d0       	rcall	.+0      	; 0x48a <GetResponseBody+0x12>
     48a:	00 d0       	rcall	.+0      	; 0x48c <GetResponseBody+0x14>
     48c:	0f 92       	push	r0
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	7c 01       	movw	r14, r24

	uint16_t i = 12;
	char buffer[5];
	while(Response[i] != '\r')
     494:	bc 01       	movw	r22, r24
     496:	64 5f       	subi	r22, 0xF4	; 244
     498:	7f 4f       	sbci	r23, 0xFF	; 255
     49a:	fc 01       	movw	r30, r24
     49c:	84 85       	ldd	r24, Z+12	; 0x0c
     49e:	8d 30       	cpi	r24, 0x0D	; 13
     4a0:	49 f0       	breq	.+18     	; 0x4b4 <GetResponseBody+0x3c>
		Read_Response(_ExpectedResponse);
	} while(Response_Status == ESP8266_RESPONSE_WAITING);

}

void GetResponseBody(char* Response, uint16_t ResponseLength)
     4a2:	3d 96       	adiw	r30, 0x0d	; 13
{

	uint16_t i = 12;
     4a4:	0c e0       	ldi	r16, 0x0C	; 12
     4a6:	10 e0       	ldi	r17, 0x00	; 0
	char buffer[5];
	while(Response[i] != '\r')
	++i;
     4a8:	0f 5f       	subi	r16, 0xFF	; 255
     4aa:	1f 4f       	sbci	r17, 0xFF	; 255
void GetResponseBody(char* Response, uint16_t ResponseLength)
{

	uint16_t i = 12;
	char buffer[5];
	while(Response[i] != '\r')
     4ac:	81 91       	ld	r24, Z+
     4ae:	8d 30       	cpi	r24, 0x0D	; 13
     4b0:	d9 f7       	brne	.-10     	; 0x4a8 <GetResponseBody+0x30>
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <GetResponseBody+0x40>
}

void GetResponseBody(char* Response, uint16_t ResponseLength)
{

	uint16_t i = 12;
     4b4:	0c e0       	ldi	r16, 0x0C	; 12
     4b6:	10 e0       	ldi	r17, 0x00	; 0
	char buffer[5];
	while(Response[i] != '\r')
	++i;

	strncpy(buffer, Response + 12, (i - 12));
     4b8:	a8 01       	movw	r20, r16
     4ba:	4c 50       	subi	r20, 0x0C	; 12
     4bc:	50 40       	sbci	r21, 0x00	; 0
     4be:	ce 01       	movw	r24, r28
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	0e 94 82 0a 	call	0x1504	; 0x1504 <strncpy>
	ResponseLength = atoi(buffer);

	i += 2;
     4c6:	b8 01       	movw	r22, r16
     4c8:	6e 5f       	subi	r22, 0xFE	; 254
     4ca:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t tmp = strlen(Response) - i;
     4cc:	ae 2d       	mov	r26, r14
     4ce:	bf 2d       	mov	r27, r15
     4d0:	fd 01       	movw	r30, r26
     4d2:	01 90       	ld	r0, Z+
     4d4:	00 20       	and	r0, r0
     4d6:	e9 f7       	brne	.-6      	; 0x4d2 <GetResponseBody+0x5a>
     4d8:	31 97       	sbiw	r30, 0x01	; 1
     4da:	ea 1b       	sub	r30, r26
     4dc:	fb 0b       	sbc	r31, r27
     4de:	6f 01       	movw	r12, r30
     4e0:	c6 1a       	sub	r12, r22
     4e2:	d7 0a       	sbc	r13, r23
	memcpy(Response, Response + i, tmp);
     4e4:	6e 0d       	add	r22, r14
     4e6:	7f 1d       	adc	r23, r15
     4e8:	8e 2d       	mov	r24, r14
     4ea:	9f 2d       	mov	r25, r15
     4ec:	4c 2d       	mov	r20, r12
     4ee:	5d 2d       	mov	r21, r13
     4f0:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <memcpy>

	if(!strncmp(Response + tmp - 6, "\r\nOK\r\n", 6))
     4f4:	f6 01       	movw	r30, r12
     4f6:	36 97       	sbiw	r30, 0x06	; 6
     4f8:	ee 0e       	add	r14, r30
     4fa:	ff 1e       	adc	r15, r31
     4fc:	c7 01       	movw	r24, r14
     4fe:	60 e6       	ldi	r22, 0x60	; 96
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	46 e0       	ldi	r20, 0x06	; 6
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <strncmp>
     50a:	28 2f       	mov	r18, r24
     50c:	39 2f       	mov	r19, r25
     50e:	21 15       	cp	r18, r1
     510:	31 05       	cpc	r19, r1
     512:	49 f4       	brne	.+18     	; 0x526 <GetResponseBody+0xae>
	memset(Response + tmp - 6, 0, i + 6);
     514:	a8 01       	movw	r20, r16
     516:	48 5f       	subi	r20, 0xF8	; 248
     518:	5f 4f       	sbci	r21, 0xFF	; 255
     51a:	8e 2d       	mov	r24, r14
     51c:	9f 2d       	mov	r25, r15
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	0e 94 6d 0a 	call	0x14da	; 0x14da <memset>
}
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	df 90       	pop	r13
     53e:	cf 90       	pop	r12
     540:	08 95       	ret

00000542 <WaitForExpectedResponse>:

bool WaitForExpectedResponse(char* ExpectedResponse)
{
	Start_Read_Response(ExpectedResponse);	/* First read response */
     542:	0e 94 2c 02 	call	0x458	; 0x458 <Start_Read_Response>

	if(!strncmp(Response + tmp - 6, "\r\nOK\r\n", 6))
	memset(Response + tmp - 6, 0, i + 6);
}

bool WaitForExpectedResponse(char* ExpectedResponse)
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 91 c8 02 	lds	r25, 0x02C8
     54c:	92 30       	cpi	r25, 0x02	; 2
     54e:	09 f4       	brne	.+2      	; 0x552 <WaitForExpectedResponse+0x10>
     550:	80 e0       	ldi	r24, 0x00	; 0
{
	Start_Read_Response(ExpectedResponse);	/* First read response */
	if((Response_Status != ESP8266_RESPONSE_TIMEOUT))
	return true;				/* Return true for success */
	return false;				/* Else return false */
}
     552:	08 95       	ret

00000554 <SendATandExpectResponse>:

bool SendATandExpectResponse(char* ATCommand, char* ExpectedResponse)
{
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	ec 01       	movw	r28, r24
     55e:	8b 01       	movw	r16, r22
	ESP8266_Clear();
     560:	0e 94 1c 02 	call	0x438	; 0x438 <ESP8266_Clear>
	USART_SendString(ATCommand);		/* Send AT command to ESP8266 */
     564:	ce 01       	movw	r24, r28
     566:	0e 94 48 07 	call	0xe90	; 0xe90 <USART_SendString>
	USART_SendString("\r\n");
     56a:	87 e6       	ldi	r24, 0x67	; 103
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 48 07 	call	0xe90	; 0xe90 <USART_SendString>
	return WaitForExpectedResponse(ExpectedResponse);
     572:	c8 01       	movw	r24, r16
     574:	0e 94 a1 02 	call	0x542	; 0x542 <WaitForExpectedResponse>
}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <ESP8266_ApplicationMode>:

bool ESP8266_ApplicationMode(uint8_t Mode)
{
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	64 97       	sbiw	r28, 0x14	; 20
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	de bf       	out	0x3e, r29	; 62
     596:	0f be       	out	0x3f, r0	; 63
     598:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[20];
	memset(_atCommand, 0, 20);
     59a:	8e 01       	movw	r16, r28
     59c:	0f 5f       	subi	r16, 0xFF	; 255
     59e:	1f 4f       	sbci	r17, 0xFF	; 255
     5a0:	94 e1       	ldi	r25, 0x14	; 20
     5a2:	d8 01       	movw	r26, r16
     5a4:	1d 92       	st	X+, r1
     5a6:	9a 95       	dec	r25
     5a8:	e9 f7       	brne	.-6      	; 0x5a4 <ESP8266_ApplicationMode+0x22>
	sprintf(_atCommand, "AT+CIPMODE=%d", Mode);
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <ESP8266_ApplicationMode+0x2a>
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <ESP8266_ApplicationMode+0x2c>
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <ESP8266_ApplicationMode+0x2e>
     5b0:	ed b7       	in	r30, 0x3d	; 61
     5b2:	fe b7       	in	r31, 0x3e	; 62
     5b4:	31 96       	adiw	r30, 0x01	; 1
     5b6:	ad b7       	in	r26, 0x3d	; 61
     5b8:	be b7       	in	r27, 0x3e	; 62
     5ba:	12 96       	adiw	r26, 0x02	; 2
     5bc:	1c 93       	st	X, r17
     5be:	0e 93       	st	-X, r16
     5c0:	11 97       	sbiw	r26, 0x01	; 1
     5c2:	2a e6       	ldi	r18, 0x6A	; 106
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	33 83       	std	Z+3, r19	; 0x03
     5c8:	22 83       	std	Z+2, r18	; 0x02
     5ca:	84 83       	std	Z+4, r24	; 0x04
     5cc:	15 82       	std	Z+5, r1	; 0x05
     5ce:	0e 94 cc 0a 	call	0x1598	; 0x1598 <sprintf>
	_atCommand[19] = 0;
     5d2:	1c 8a       	std	Y+20, r1	; 0x14
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
     5d4:	ed b7       	in	r30, 0x3d	; 61
     5d6:	fe b7       	in	r31, 0x3e	; 62
     5d8:	36 96       	adiw	r30, 0x06	; 6
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	fe bf       	out	0x3e, r31	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	ed bf       	out	0x3d, r30	; 61
     5e4:	c8 01       	movw	r24, r16
     5e6:	60 e6       	ldi	r22, 0x60	; 96
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	0e 94 aa 02 	call	0x554	; 0x554 <SendATandExpectResponse>
}
     5ee:	64 96       	adiw	r28, 0x14	; 20
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	08 95       	ret

00000604 <ESP8266_ConnectionMode>:

bool ESP8266_ConnectionMode(uint8_t Mode)
{
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	64 97       	sbiw	r28, 0x14	; 20
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[20];
	memset(_atCommand, 0, 20);
     61c:	8e 01       	movw	r16, r28
     61e:	0f 5f       	subi	r16, 0xFF	; 255
     620:	1f 4f       	sbci	r17, 0xFF	; 255
     622:	94 e1       	ldi	r25, 0x14	; 20
     624:	d8 01       	movw	r26, r16
     626:	1d 92       	st	X+, r1
     628:	9a 95       	dec	r25
     62a:	e9 f7       	brne	.-6      	; 0x626 <ESP8266_ConnectionMode+0x22>
	sprintf(_atCommand, "AT+CIPMUX=%d", Mode);
     62c:	00 d0       	rcall	.+0      	; 0x62e <ESP8266_ConnectionMode+0x2a>
     62e:	00 d0       	rcall	.+0      	; 0x630 <ESP8266_ConnectionMode+0x2c>
     630:	00 d0       	rcall	.+0      	; 0x632 <ESP8266_ConnectionMode+0x2e>
     632:	ed b7       	in	r30, 0x3d	; 61
     634:	fe b7       	in	r31, 0x3e	; 62
     636:	31 96       	adiw	r30, 0x01	; 1
     638:	ad b7       	in	r26, 0x3d	; 61
     63a:	be b7       	in	r27, 0x3e	; 62
     63c:	12 96       	adiw	r26, 0x02	; 2
     63e:	1c 93       	st	X, r17
     640:	0e 93       	st	-X, r16
     642:	11 97       	sbiw	r26, 0x01	; 1
     644:	28 e7       	ldi	r18, 0x78	; 120
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	33 83       	std	Z+3, r19	; 0x03
     64a:	22 83       	std	Z+2, r18	; 0x02
     64c:	84 83       	std	Z+4, r24	; 0x04
     64e:	15 82       	std	Z+5, r1	; 0x05
     650:	0e 94 cc 0a 	call	0x1598	; 0x1598 <sprintf>
	_atCommand[19] = 0;
     654:	1c 8a       	std	Y+20, r1	; 0x14
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
     656:	ed b7       	in	r30, 0x3d	; 61
     658:	fe b7       	in	r31, 0x3e	; 62
     65a:	36 96       	adiw	r30, 0x06	; 6
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	fe bf       	out	0x3e, r31	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	ed bf       	out	0x3d, r30	; 61
     666:	c8 01       	movw	r24, r16
     668:	60 e6       	ldi	r22, 0x60	; 96
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	0e 94 aa 02 	call	0x554	; 0x554 <SendATandExpectResponse>
}
     670:	64 96       	adiw	r28, 0x14	; 20
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret

00000686 <ESP8266_Begin>:

bool ESP8266_Begin()
{
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	c5 e0       	ldi	r28, 0x05	; 5
	for (uint8_t i=0;i<5;i++)
	{
		if(SendATandExpectResponse("ATE0","\r\nOK\r\n")||SendATandExpectResponse("AT","\r\nOK\r\n"))
     696:	0f 2e       	mov	r0, r31
     698:	f5 e8       	ldi	r31, 0x85	; 133
     69a:	ef 2e       	mov	r14, r31
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	ff 2e       	mov	r15, r31
     6a0:	f0 2d       	mov	r31, r0
     6a2:	00 e6       	ldi	r16, 0x60	; 96
     6a4:	10 e0       	ldi	r17, 0x00	; 0
     6a6:	0f 2e       	mov	r0, r31
     6a8:	fa e8       	ldi	r31, 0x8A	; 138
     6aa:	cf 2e       	mov	r12, r31
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	df 2e       	mov	r13, r31
     6b0:	f0 2d       	mov	r31, r0
     6b2:	c7 01       	movw	r24, r14
     6b4:	b8 01       	movw	r22, r16
     6b6:	0e 94 aa 02 	call	0x554	; 0x554 <SendATandExpectResponse>
     6ba:	88 23       	and	r24, r24
     6bc:	49 f4       	brne	.+18     	; 0x6d0 <ESP8266_Begin+0x4a>
     6be:	c6 01       	movw	r24, r12
     6c0:	b8 01       	movw	r22, r16
     6c2:	0e 94 aa 02 	call	0x554	; 0x554 <SendATandExpectResponse>
     6c6:	88 23       	and	r24, r24
     6c8:	29 f4       	brne	.+10     	; 0x6d4 <ESP8266_Begin+0x4e>
     6ca:	c1 50       	subi	r28, 0x01	; 1
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
}

bool ESP8266_Begin()
{
	for (uint8_t i=0;i<5;i++)
     6cc:	91 f7       	brne	.-28     	; 0x6b2 <ESP8266_Begin+0x2c>
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <ESP8266_Begin+0x50>
	{
		if(SendATandExpectResponse("ATE0","\r\nOK\r\n")||SendATandExpectResponse("AT","\r\nOK\r\n"))
		return true;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <ESP8266_Begin+0x50>
     6d4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return false;
}
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	df 90       	pop	r13
     6e2:	cf 90       	pop	r12
     6e4:	08 95       	ret

000006e6 <ESP8266_Close>:

bool ESP8266_Close()
{
	return SendATandExpectResponse("AT+CIPCLOSE=1", "\r\nOK\r\n");
     6e6:	8d e8       	ldi	r24, 0x8D	; 141
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	60 e6       	ldi	r22, 0x60	; 96
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	0e 94 aa 02 	call	0x554	; 0x554 <SendATandExpectResponse>
}
     6f2:	08 95       	ret

000006f4 <ESP8266_WIFIMode>:

bool ESP8266_WIFIMode(uint8_t _mode)
{
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	64 97       	sbiw	r28, 0x14	; 20
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[20];
	memset(_atCommand, 0, 20);
     70c:	8e 01       	movw	r16, r28
     70e:	0f 5f       	subi	r16, 0xFF	; 255
     710:	1f 4f       	sbci	r17, 0xFF	; 255
     712:	94 e1       	ldi	r25, 0x14	; 20
     714:	d8 01       	movw	r26, r16
     716:	1d 92       	st	X+, r1
     718:	9a 95       	dec	r25
     71a:	e9 f7       	brne	.-6      	; 0x716 <ESP8266_WIFIMode+0x22>
	sprintf(_atCommand, "AT+CWMODE=%d", _mode);
     71c:	00 d0       	rcall	.+0      	; 0x71e <ESP8266_WIFIMode+0x2a>
     71e:	00 d0       	rcall	.+0      	; 0x720 <ESP8266_WIFIMode+0x2c>
     720:	00 d0       	rcall	.+0      	; 0x722 <ESP8266_WIFIMode+0x2e>
     722:	ed b7       	in	r30, 0x3d	; 61
     724:	fe b7       	in	r31, 0x3e	; 62
     726:	31 96       	adiw	r30, 0x01	; 1
     728:	ad b7       	in	r26, 0x3d	; 61
     72a:	be b7       	in	r27, 0x3e	; 62
     72c:	12 96       	adiw	r26, 0x02	; 2
     72e:	1c 93       	st	X, r17
     730:	0e 93       	st	-X, r16
     732:	11 97       	sbiw	r26, 0x01	; 1
     734:	2b e9       	ldi	r18, 0x9B	; 155
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	33 83       	std	Z+3, r19	; 0x03
     73a:	22 83       	std	Z+2, r18	; 0x02
     73c:	84 83       	std	Z+4, r24	; 0x04
     73e:	15 82       	std	Z+5, r1	; 0x05
     740:	0e 94 cc 0a 	call	0x1598	; 0x1598 <sprintf>
	_atCommand[19] = 0;
     744:	1c 8a       	std	Y+20, r1	; 0x14
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
     746:	ed b7       	in	r30, 0x3d	; 61
     748:	fe b7       	in	r31, 0x3e	; 62
     74a:	36 96       	adiw	r30, 0x06	; 6
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	fe bf       	out	0x3e, r31	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	ed bf       	out	0x3d, r30	; 61
     756:	c8 01       	movw	r24, r16
     758:	60 e6       	ldi	r22, 0x60	; 96
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	0e 94 aa 02 	call	0x554	; 0x554 <SendATandExpectResponse>
}
     760:	64 96       	adiw	r28, 0x14	; 20
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	de bf       	out	0x3e, r29	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	cd bf       	out	0x3d, r28	; 61
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	08 95       	ret

00000776 <ESP8266_JoinAccessPoint>:

uint8_t ESP8266_JoinAccessPoint(char* _SSID, char* _PASSWORD)
{
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	ec 97       	sbiw	r28, 0x3c	; 60
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[60];
	memset(_atCommand, 0, 60);
     78e:	8e 01       	movw	r16, r28
     790:	0f 5f       	subi	r16, 0xFF	; 255
     792:	1f 4f       	sbci	r17, 0xFF	; 255
     794:	2c e3       	ldi	r18, 0x3C	; 60
     796:	d8 01       	movw	r26, r16
     798:	1d 92       	st	X+, r1
     79a:	2a 95       	dec	r18
     79c:	e9 f7       	brne	.-6      	; 0x798 <ESP8266_JoinAccessPoint+0x22>
	sprintf(_atCommand, "AT+CWJAP=\"%s\",\"%s\"", _SSID, _PASSWORD);
     79e:	ed b7       	in	r30, 0x3d	; 61
     7a0:	fe b7       	in	r31, 0x3e	; 62
     7a2:	38 97       	sbiw	r30, 0x08	; 8
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	fe bf       	out	0x3e, r31	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	ed bf       	out	0x3d, r30	; 61
     7ae:	31 96       	adiw	r30, 0x01	; 1
     7b0:	ad b7       	in	r26, 0x3d	; 61
     7b2:	be b7       	in	r27, 0x3e	; 62
     7b4:	12 96       	adiw	r26, 0x02	; 2
     7b6:	1c 93       	st	X, r17
     7b8:	0e 93       	st	-X, r16
     7ba:	11 97       	sbiw	r26, 0x01	; 1
     7bc:	28 ea       	ldi	r18, 0xA8	; 168
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	33 83       	std	Z+3, r19	; 0x03
     7c2:	22 83       	std	Z+2, r18	; 0x02
     7c4:	95 83       	std	Z+5, r25	; 0x05
     7c6:	84 83       	std	Z+4, r24	; 0x04
     7c8:	77 83       	std	Z+7, r23	; 0x07
     7ca:	66 83       	std	Z+6, r22	; 0x06
     7cc:	0e 94 cc 0a 	call	0x1598	; 0x1598 <sprintf>
	_atCommand[59] = 0;
     7d0:	1c ae       	sts	0xbc, r17
	if(SendATandExpectResponse(_atCommand, "\r\nWIFI CONNECTED\r\n"))
     7d2:	ed b7       	in	r30, 0x3d	; 61
     7d4:	fe b7       	in	r31, 0x3e	; 62
     7d6:	38 96       	adiw	r30, 0x08	; 8
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	fe bf       	out	0x3e, r31	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	ed bf       	out	0x3d, r30	; 61
     7e2:	c8 01       	movw	r24, r16
     7e4:	6b eb       	ldi	r22, 0xBB	; 187
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	0e 94 aa 02 	call	0x554	; 0x554 <SendATandExpectResponse>
     7ec:	88 23       	and	r24, r24
     7ee:	11 f5       	brne	.+68     	; 0x834 <ESP8266_JoinAccessPoint+0xbe>
	return ESP8266_WIFI_CONNECTED;
	else{
		if(strstr(RESPONSE_BUFFER, "+CWJAP:1"))
     7f0:	88 e2       	ldi	r24, 0x28	; 40
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	6e ec       	ldi	r22, 0xCE	; 206
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	0e 94 91 0a 	call	0x1522	; 0x1522 <strstr>
     7fc:	00 97       	sbiw	r24, 0x00	; 0
     7fe:	e1 f4       	brne	.+56     	; 0x838 <ESP8266_JoinAccessPoint+0xc2>
		return ESP8266_CONNECTION_TIMEOUT;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:2"))
     800:	88 e2       	ldi	r24, 0x28	; 40
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	67 ed       	ldi	r22, 0xD7	; 215
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	0e 94 91 0a 	call	0x1522	; 0x1522 <strstr>
     80c:	00 97       	sbiw	r24, 0x00	; 0
     80e:	b1 f4       	brne	.+44     	; 0x83c <ESP8266_JoinAccessPoint+0xc6>
		return ESP8266_WRONG_PASSWORD;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:3"))
     810:	88 e2       	ldi	r24, 0x28	; 40
     812:	92 e0       	ldi	r25, 0x02	; 2
     814:	60 ee       	ldi	r22, 0xE0	; 224
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	0e 94 91 0a 	call	0x1522	; 0x1522 <strstr>
     81c:	00 97       	sbiw	r24, 0x00	; 0
     81e:	81 f4       	brne	.+32     	; 0x840 <ESP8266_JoinAccessPoint+0xca>
		return ESP8266_NOT_FOUND_TARGET_AP;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:4"))
     820:	88 e2       	ldi	r24, 0x28	; 40
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	69 ee       	ldi	r22, 0xE9	; 233
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	0e 94 91 0a 	call	0x1522	; 0x1522 <strstr>
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	51 f0       	breq	.+20     	; 0x844 <ESP8266_JoinAccessPoint+0xce>
		return ESP8266_CONNECTION_FAILED;
     830:	84 e0       	ldi	r24, 0x04	; 4
     832:	09 c0       	rjmp	.+18     	; 0x846 <ESP8266_JoinAccessPoint+0xd0>
	char _atCommand[60];
	memset(_atCommand, 0, 60);
	sprintf(_atCommand, "AT+CWJAP=\"%s\",\"%s\"", _SSID, _PASSWORD);
	_atCommand[59] = 0;
	if(SendATandExpectResponse(_atCommand, "\r\nWIFI CONNECTED\r\n"))
	return ESP8266_WIFI_CONNECTED;
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	07 c0       	rjmp	.+14     	; 0x846 <ESP8266_JoinAccessPoint+0xd0>
	else{
		if(strstr(RESPONSE_BUFFER, "+CWJAP:1"))
		return ESP8266_CONNECTION_TIMEOUT;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	05 c0       	rjmp	.+10     	; 0x846 <ESP8266_JoinAccessPoint+0xd0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:2"))
		return ESP8266_WRONG_PASSWORD;
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	03 c0       	rjmp	.+6      	; 0x846 <ESP8266_JoinAccessPoint+0xd0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:3"))
		return ESP8266_NOT_FOUND_TARGET_AP;
     840:	83 e0       	ldi	r24, 0x03	; 3
     842:	01 c0       	rjmp	.+2      	; 0x846 <ESP8266_JoinAccessPoint+0xd0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:4"))
		return ESP8266_CONNECTION_FAILED;
		else
		return ESP8266_JOIN_UNKNOWN_ERROR;
     844:	85 e0       	ldi	r24, 0x05	; 5
	}
}
     846:	ec 96       	adiw	r28, 0x3c	; 60
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	de bf       	out	0x3e, r29	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	cd bf       	out	0x3d, r28	; 61
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	08 95       	ret

0000085c <ESP8266_connected>:

uint8_t ESP8266_connected()
{
	SendATandExpectResponse("AT+CIPSTATUS", "\r\nOK\r\n");
     85c:	82 ef       	ldi	r24, 0xF2	; 242
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	60 e6       	ldi	r22, 0x60	; 96
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	0e 94 aa 02 	call	0x554	; 0x554 <SendATandExpectResponse>
	if(strstr(RESPONSE_BUFFER, "STATUS:2"))
     868:	88 e2       	ldi	r24, 0x28	; 40
     86a:	92 e0       	ldi	r25, 0x02	; 2
     86c:	6f ef       	ldi	r22, 0xFF	; 255
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	0e 94 91 0a 	call	0x1522	; 0x1522 <strstr>
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	d1 f4       	brne	.+52     	; 0x8ac <ESP8266_connected+0x50>
	return ESP8266_CONNECTED_TO_AP;
	else if(strstr(RESPONSE_BUFFER, "STATUS:3"))
     878:	88 e2       	ldi	r24, 0x28	; 40
     87a:	92 e0       	ldi	r25, 0x02	; 2
     87c:	68 e0       	ldi	r22, 0x08	; 8
     87e:	71 e0       	ldi	r23, 0x01	; 1
     880:	0e 94 91 0a 	call	0x1522	; 0x1522 <strstr>
     884:	00 97       	sbiw	r24, 0x00	; 0
     886:	a1 f4       	brne	.+40     	; 0x8b0 <ESP8266_connected+0x54>
	return ESP8266_CREATED_TRANSMISSION;
	else if(strstr(RESPONSE_BUFFER, "STATUS:4"))
     888:	88 e2       	ldi	r24, 0x28	; 40
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	61 e1       	ldi	r22, 0x11	; 17
     88e:	71 e0       	ldi	r23, 0x01	; 1
     890:	0e 94 91 0a 	call	0x1522	; 0x1522 <strstr>
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	71 f4       	brne	.+28     	; 0x8b4 <ESP8266_connected+0x58>
	return ESP8266_TRANSMISSION_DISCONNECTED;
	else if(strstr(RESPONSE_BUFFER, "STATUS:5"))
     898:	88 e2       	ldi	r24, 0x28	; 40
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	6a e1       	ldi	r22, 0x1A	; 26
     89e:	71 e0       	ldi	r23, 0x01	; 1
     8a0:	0e 94 91 0a 	call	0x1522	; 0x1522 <strstr>
     8a4:	00 97       	sbiw	r24, 0x00	; 0
     8a6:	41 f0       	breq	.+16     	; 0x8b8 <ESP8266_connected+0x5c>
	return ESP8266_NOT_CONNECTED_TO_AP;
     8a8:	83 e0       	ldi	r24, 0x03	; 3
     8aa:	08 95       	ret

uint8_t ESP8266_connected()
{
	SendATandExpectResponse("AT+CIPSTATUS", "\r\nOK\r\n");
	if(strstr(RESPONSE_BUFFER, "STATUS:2"))
	return ESP8266_CONNECTED_TO_AP;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:3"))
	return ESP8266_CREATED_TRANSMISSION;
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:4"))
	return ESP8266_TRANSMISSION_DISCONNECTED;
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:5"))
	return ESP8266_NOT_CONNECTED_TO_AP;
	else
	return ESP8266_CONNECT_UNKNOWN_ERROR;
     8b8:	84 e0       	ldi	r24, 0x04	; 4
}
     8ba:	08 95       	ret

000008bc <ESP8266_Start>:

uint8_t ESP8266_Start(uint8_t _ConnectionNumber, char* Domain, char* Port)
{
     8bc:	cf 92       	push	r12
     8be:	df 92       	push	r13
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	ec 97       	sbiw	r28, 0x3c	; 60
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	18 2f       	mov	r17, r24
     8dc:	7b 01       	movw	r14, r22
     8de:	6a 01       	movw	r12, r20
	bool _startResponse;
	char _atCommand[60];
	memset(_atCommand, 0, 60);
     8e0:	fe 01       	movw	r30, r28
     8e2:	31 96       	adiw	r30, 0x01	; 1
     8e4:	8c e3       	ldi	r24, 0x3C	; 60
     8e6:	df 01       	movw	r26, r30
     8e8:	1d 92       	st	X+, r1
     8ea:	8a 95       	dec	r24
     8ec:	e9 f7       	brne	.-6      	; 0x8e8 <ESP8266_Start+0x2c>
	_atCommand[59] = 0;

	if(SendATandExpectResponse("AT+CIPMUX?", "CIPMUX:0"))
     8ee:	83 e2       	ldi	r24, 0x23	; 35
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	6e e2       	ldi	r22, 0x2E	; 46
     8f4:	71 e0       	ldi	r23, 0x01	; 1
     8f6:	0e 94 aa 02 	call	0x554	; 0x554 <SendATandExpectResponse>
     8fa:	88 23       	and	r24, r24
     8fc:	31 f1       	breq	.+76     	; 0x94a <ESP8266_Start+0x8e>
	sprintf(_atCommand, "AT+CIPSTART=\"TCP\",\"%s\",%s", Domain, Port);
     8fe:	8d b7       	in	r24, 0x3d	; 61
     900:	9e b7       	in	r25, 0x3e	; 62
     902:	08 97       	sbiw	r24, 0x08	; 8
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	9e bf       	out	0x3e, r25	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	8d bf       	out	0x3d, r24	; 61
     90e:	ed b7       	in	r30, 0x3d	; 61
     910:	fe b7       	in	r31, 0x3e	; 62
     912:	31 96       	adiw	r30, 0x01	; 1
     914:	ce 01       	movw	r24, r28
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	ad b7       	in	r26, 0x3d	; 61
     91a:	be b7       	in	r27, 0x3e	; 62
     91c:	12 96       	adiw	r26, 0x02	; 2
     91e:	9c 93       	st	X, r25
     920:	8e 93       	st	-X, r24
     922:	11 97       	sbiw	r26, 0x01	; 1
     924:	87 e3       	ldi	r24, 0x37	; 55
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	93 83       	std	Z+3, r25	; 0x03
     92a:	82 83       	std	Z+2, r24	; 0x02
     92c:	f5 82       	std	Z+5, r15	; 0x05
     92e:	e4 82       	std	Z+4, r14	; 0x04
     930:	d7 82       	std	Z+7, r13	; 0x07
     932:	c6 82       	std	Z+6, r12	; 0x06
     934:	0e 94 cc 0a 	call	0x1598	; 0x1598 <sprintf>
     938:	8d b7       	in	r24, 0x3d	; 61
     93a:	9e b7       	in	r25, 0x3e	; 62
     93c:	08 96       	adiw	r24, 0x08	; 8
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	9e bf       	out	0x3e, r25	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	8d bf       	out	0x3d, r24	; 61
     948:	25 c0       	rjmp	.+74     	; 0x994 <ESP8266_Start+0xd8>
	else
	sprintf(_atCommand, "AT+CIPSTART=\"%d\",\"TCP\",\"%s\",%s", _ConnectionNumber, Domain, Port);
     94a:	ad b7       	in	r26, 0x3d	; 61
     94c:	be b7       	in	r27, 0x3e	; 62
     94e:	1a 97       	sbiw	r26, 0x0a	; 10
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	be bf       	out	0x3e, r27	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	ad bf       	out	0x3d, r26	; 61
     95a:	ed b7       	in	r30, 0x3d	; 61
     95c:	fe b7       	in	r31, 0x3e	; 62
     95e:	31 96       	adiw	r30, 0x01	; 1
     960:	ce 01       	movw	r24, r28
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	12 96       	adiw	r26, 0x02	; 2
     966:	9c 93       	st	X, r25
     968:	8e 93       	st	-X, r24
     96a:	11 97       	sbiw	r26, 0x01	; 1
     96c:	81 e5       	ldi	r24, 0x51	; 81
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	93 83       	std	Z+3, r25	; 0x03
     972:	82 83       	std	Z+2, r24	; 0x02
     974:	14 83       	std	Z+4, r17	; 0x04
     976:	15 82       	std	Z+5, r1	; 0x05
     978:	f7 82       	std	Z+7, r15	; 0x07
     97a:	e6 82       	std	Z+6, r14	; 0x06
     97c:	d1 86       	std	Z+9, r13	; 0x09
     97e:	c0 86       	std	Z+8, r12	; 0x08
     980:	0e 94 cc 0a 	call	0x1598	; 0x1598 <sprintf>
     984:	8d b7       	in	r24, 0x3d	; 61
     986:	9e b7       	in	r25, 0x3e	; 62
     988:	0a 96       	adiw	r24, 0x0a	; 10
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	9e bf       	out	0x3e, r25	; 62
     990:	0f be       	out	0x3f, r0	; 63
     992:	8d bf       	out	0x3d, r24	; 61

	_startResponse = SendATandExpectResponse(_atCommand, "CONNECT\r\n");
     994:	ce 01       	movw	r24, r28
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	60 e7       	ldi	r22, 0x70	; 112
     99a:	71 e0       	ldi	r23, 0x01	; 1
     99c:	0e 94 aa 02 	call	0x554	; 0x554 <SendATandExpectResponse>
	if(!_startResponse)
     9a0:	88 23       	and	r24, r24
     9a2:	29 f4       	brne	.+10     	; 0x9ae <ESP8266_Start+0xf2>
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
     9a4:	80 91 c8 02 	lds	r24, 0x02C8
     9a8:	82 30       	cpi	r24, 0x02	; 2
     9aa:	19 f4       	brne	.+6      	; 0x9b2 <ESP8266_Start+0xf6>
     9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <ESP8266_Start+0xf8>
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
	}
	return ESP8266_RESPONSE_FINISHED;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <ESP8266_Start+0xf8>
	_startResponse = SendATandExpectResponse(_atCommand, "CONNECT\r\n");
	if(!_startResponse)
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
     9b2:	85 e0       	ldi	r24, 0x05	; 5
	}
	return ESP8266_RESPONSE_FINISHED;
}
     9b4:	ec 96       	adiw	r28, 0x3c	; 60
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	de bf       	out	0x3e, r29	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	cd bf       	out	0x3d, r28	; 61
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	08 95       	ret

000009d0 <ESP8266_Send>:

uint8_t ESP8266_Send(char* Data)
{
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
     9e0:	64 97       	sbiw	r28, 0x14	; 20
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	18 2f       	mov	r17, r24
     9ee:	09 2f       	mov	r16, r25
	char _atCommand[20];
	memset(_atCommand, 0, 20);
     9f0:	7e 01       	movw	r14, r28
     9f2:	08 94       	sec
     9f4:	e1 1c       	adc	r14, r1
     9f6:	f1 1c       	adc	r15, r1
     9f8:	84 e1       	ldi	r24, 0x14	; 20
     9fa:	d7 01       	movw	r26, r14
     9fc:	1d 92       	st	X+, r1
     9fe:	8a 95       	dec	r24
     a00:	e9 f7       	brne	.-6      	; 0x9fc <ESP8266_Send+0x2c>
	sprintf(_atCommand, "AT+CIPSEND=%d", (strlen(Data)+2));
     a02:	e1 2f       	mov	r30, r17
     a04:	f9 2f       	mov	r31, r25
     a06:	df 01       	movw	r26, r30
     a08:	0d 90       	ld	r0, X+
     a0a:	00 20       	and	r0, r0
     a0c:	e9 f7       	brne	.-6      	; 0xa08 <ESP8266_Send+0x38>
     a0e:	cd 01       	movw	r24, r26
     a10:	8e 1b       	sub	r24, r30
     a12:	9f 0b       	sbc	r25, r31
     a14:	00 d0       	rcall	.+0      	; 0xa16 <ESP8266_Send+0x46>
     a16:	00 d0       	rcall	.+0      	; 0xa18 <ESP8266_Send+0x48>
     a18:	00 d0       	rcall	.+0      	; 0xa1a <ESP8266_Send+0x4a>
     a1a:	ed b7       	in	r30, 0x3d	; 61
     a1c:	fe b7       	in	r31, 0x3e	; 62
     a1e:	31 96       	adiw	r30, 0x01	; 1
     a20:	ad b7       	in	r26, 0x3d	; 61
     a22:	be b7       	in	r27, 0x3e	; 62
     a24:	12 96       	adiw	r26, 0x02	; 2
     a26:	fc 92       	st	X, r15
     a28:	ee 92       	st	-X, r14
     a2a:	11 97       	sbiw	r26, 0x01	; 1
     a2c:	2a e7       	ldi	r18, 0x7A	; 122
     a2e:	31 e0       	ldi	r19, 0x01	; 1
     a30:	33 83       	std	Z+3, r19	; 0x03
     a32:	22 83       	std	Z+2, r18	; 0x02
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	95 83       	std	Z+5, r25	; 0x05
     a38:	84 83       	std	Z+4, r24	; 0x04
     a3a:	0e 94 cc 0a 	call	0x1598	; 0x1598 <sprintf>
	_atCommand[19] = 0;
     a3e:	1c 8a       	std	Y+20, r1	; 0x14
	SendATandExpectResponse(_atCommand, "\r\nOK\r\n>");
     a40:	ed b7       	in	r30, 0x3d	; 61
     a42:	fe b7       	in	r31, 0x3e	; 62
     a44:	36 96       	adiw	r30, 0x06	; 6
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	fe bf       	out	0x3e, r31	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	ed bf       	out	0x3d, r30	; 61
     a50:	c7 01       	movw	r24, r14
     a52:	68 e8       	ldi	r22, 0x88	; 136
     a54:	71 e0       	ldi	r23, 0x01	; 1
     a56:	0e 94 aa 02 	call	0x554	; 0x554 <SendATandExpectResponse>
	if(!SendATandExpectResponse(Data, "\r\nSEND OK\r\n"))
     a5a:	81 2f       	mov	r24, r17
     a5c:	90 2f       	mov	r25, r16
     a5e:	60 e9       	ldi	r22, 0x90	; 144
     a60:	71 e0       	ldi	r23, 0x01	; 1
     a62:	0e 94 aa 02 	call	0x554	; 0x554 <SendATandExpectResponse>
     a66:	88 23       	and	r24, r24
     a68:	29 f4       	brne	.+10     	; 0xa74 <ESP8266_Send+0xa4>
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
     a6a:	80 91 c8 02 	lds	r24, 0x02C8
     a6e:	82 30       	cpi	r24, 0x02	; 2
     a70:	19 f4       	brne	.+6      	; 0xa78 <ESP8266_Send+0xa8>
     a72:	03 c0       	rjmp	.+6      	; 0xa7a <ESP8266_Send+0xaa>
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
	}
	return ESP8266_RESPONSE_FINISHED;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <ESP8266_Send+0xaa>
	SendATandExpectResponse(_atCommand, "\r\nOK\r\n>");
	if(!SendATandExpectResponse(Data, "\r\nSEND OK\r\n"))
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
     a78:	85 e0       	ldi	r24, 0x05	; 5
	}
	return ESP8266_RESPONSE_FINISHED;
}
     a7a:	64 96       	adiw	r28, 0x14	; 20
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	08 95       	ret

00000a94 <ESP8266_DataAvailable>:

int16_t ESP8266_DataAvailable()
{
	return (Counter - pointer);
     a94:	80 91 26 02 	lds	r24, 0x0226
     a98:	90 91 27 02 	lds	r25, 0x0227
     a9c:	20 91 24 02 	lds	r18, 0x0224
     aa0:	30 91 25 02 	lds	r19, 0x0225
     aa4:	82 1b       	sub	r24, r18
     aa6:	93 0b       	sbc	r25, r19
}
     aa8:	08 95       	ret

00000aaa <ESP8266_DataRead>:

uint8_t ESP8266_DataRead()
{
	if(pointer < Counter)
     aaa:	20 91 24 02 	lds	r18, 0x0224
     aae:	30 91 25 02 	lds	r19, 0x0225
     ab2:	80 91 26 02 	lds	r24, 0x0226
     ab6:	90 91 27 02 	lds	r25, 0x0227
     aba:	28 17       	cp	r18, r24
     abc:	39 07       	cpc	r19, r25
     abe:	7c f4       	brge	.+30     	; 0xade <ESP8266_DataRead+0x34>
	return RESPONSE_BUFFER[pointer++];
     ac0:	20 91 24 02 	lds	r18, 0x0224
     ac4:	30 91 25 02 	lds	r19, 0x0225
     ac8:	f9 01       	movw	r30, r18
     aca:	e8 5d       	subi	r30, 0xD8	; 216
     acc:	fd 4f       	sbci	r31, 0xFD	; 253
     ace:	80 81       	ld	r24, Z
     ad0:	2f 5f       	subi	r18, 0xFF	; 255
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	30 93 25 02 	sts	0x0225, r19
     ad8:	20 93 24 02 	sts	0x0224, r18
     adc:	08 95       	ret
	else{
		ESP8266_Clear();
     ade:	0e 94 1c 02 	call	0x438	; 0x438 <ESP8266_Clear>
		return 0;
     ae2:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ae4:	08 95       	ret

00000ae6 <Read_Data>:

uint16_t Read_Data(char* _buffer)
{
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	2f ef       	ldi	r18, 0xFF	; 255
     af0:	31 ee       	ldi	r19, 0xE1	; 225
     af2:	44 e0       	ldi	r20, 0x04	; 4
     af4:	21 50       	subi	r18, 0x01	; 1
     af6:	30 40       	sbci	r19, 0x00	; 0
     af8:	40 40       	sbci	r20, 0x00	; 0
     afa:	e1 f7       	brne	.-8      	; 0xaf4 <Read_Data+0xe>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <Read_Data+0x18>
     afe:	00 00       	nop
     b00:	08 2f       	mov	r16, r24
     b02:	19 2f       	mov	r17, r25
	uint16_t len = 0;
     b04:	c0 e0       	ldi	r28, 0x00	; 0
     b06:	d0 e0       	ldi	r29, 0x00	; 0
     b08:	06 c0       	rjmp	.+12     	; 0xb16 <Read_Data+0x30>
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
	_buffer[len++] = ESP8266_DataRead();
     b0a:	0e 94 55 05 	call	0xaaa	; 0xaaa <ESP8266_DataRead>
     b0e:	f8 01       	movw	r30, r16
     b10:	81 93       	st	Z+, r24
     b12:	8f 01       	movw	r16, r30
     b14:	21 96       	adiw	r28, 0x01	; 1

uint16_t Read_Data(char* _buffer)
{
	uint16_t len = 0;
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
     b16:	0e 94 4a 05 	call	0xa94	; 0xa94 <ESP8266_DataAvailable>
     b1a:	18 16       	cp	r1, r24
     b1c:	19 06       	cpc	r1, r25
     b1e:	ac f3       	brlt	.-22     	; 0xb0a <Read_Data+0x24>
	_buffer[len++] = ESP8266_DataRead();
	return len;
}
     b20:	8c 2f       	mov	r24, r28
     b22:	9d 2f       	mov	r25, r29
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	08 95       	ret

00000b2e <__vector_11>:

ISR (USART_RXC_vect)
{
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	2f 93       	push	r18
     b3a:	8f 93       	push	r24
     b3c:	9f 93       	push	r25
     b3e:	ef 93       	push	r30
     b40:	ff 93       	push	r31
	uint8_t oldsrg = SREG;
     b42:	2f b7       	in	r18, 0x3f	; 63
	cli();
     b44:	f8 94       	cli
	RESPONSE_BUFFER[Counter] = UDR;
     b46:	e0 91 26 02 	lds	r30, 0x0226
     b4a:	f0 91 27 02 	lds	r31, 0x0227
     b4e:	8c b1       	in	r24, 0x0c	; 12
     b50:	e8 5d       	subi	r30, 0xD8	; 216
     b52:	fd 4f       	sbci	r31, 0xFD	; 253
     b54:	80 83       	st	Z, r24
	Counter++;
     b56:	80 91 26 02 	lds	r24, 0x0226
     b5a:	90 91 27 02 	lds	r25, 0x0227
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	90 93 27 02 	sts	0x0227, r25
     b64:	80 93 26 02 	sts	0x0226, r24
	if(Counter == DEFAULT_BUFFER_SIZE){
     b68:	80 91 26 02 	lds	r24, 0x0226
     b6c:	90 91 27 02 	lds	r25, 0x0227
     b70:	80 3a       	cpi	r24, 0xA0	; 160
     b72:	91 05       	cpc	r25, r1
     b74:	41 f4       	brne	.+16     	; 0xb86 <__vector_11+0x58>
		Counter = 0; pointer = 0;
     b76:	10 92 27 02 	sts	0x0227, r1
     b7a:	10 92 26 02 	sts	0x0226, r1
     b7e:	10 92 25 02 	sts	0x0225, r1
     b82:	10 92 24 02 	sts	0x0224, r1
	}
	SREG = oldsrg;
     b86:	2f bf       	out	0x3f, r18	; 63
}
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	9f 91       	pop	r25
     b8e:	8f 91       	pop	r24
     b90:	2f 91       	pop	r18
     b92:	0f 90       	pop	r0
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	0f 90       	pop	r0
     b98:	1f 90       	pop	r1
     b9a:	18 95       	reti

00000b9c <main>:

int main(void)
{
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	c0 5a       	subi	r28, 0xA0	; 160
     ba6:	d0 40       	sbci	r29, 0x00	; 0
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
	char _buffer[150];
	uint8_t Connect_Status;
	int i,a=0;
	float g;
	char value[10];
	DDRD |= 0x0C;
     bb2:	81 b3       	in	r24, 0x11	; 17
     bb4:	8c 60       	ori	r24, 0x0C	; 12
     bb6:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << PD2);
     bb8:	8a 98       	cbi	0x11, 2	; 17
	DDRD &= ~(1 << PD3);
     bba:	8b 98       	cbi	0x11, 3	; 17
	DDRC |= 0x07;
     bbc:	84 b3       	in	r24, 0x14	; 20
     bbe:	87 60       	ori	r24, 0x07	; 7
     bc0:	84 bb       	out	0x14, r24	; 20
	LCD_Init();
     bc2:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_Init>
	LCD_Clear();
     bc6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_Clear>
	LCD_String("Radiance IIT Bombay");
     bca:	8c e9       	ldi	r24, 0x9C	; 156
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_String>

	USART_Init(115200);			/* Initiate USART with 115200 baud rate */
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	72 ec       	ldi	r23, 0xC2	; 194
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 19 07 	call	0xe32	; 0xe32 <USART_Init>
	sei();					/* Start global interrupt */
     bde:	78 94       	sei

	while(!ESP8266_Begin());
     be0:	0e 94 43 03 	call	0x686	; 0x686 <ESP8266_Begin>
     be4:	88 23       	and	r24, r24
     be6:	e1 f3       	breq	.-8      	; 0xbe0 <main+0x44>
	ESP8266_WIFIMode(BOTH_STATION_AND_ACCESPOINT);/* 3 = Both (AP and STA) */
     be8:	83 e0       	ldi	r24, 0x03	; 3
     bea:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <ESP8266_WIFIMode>
	ESP8266_ConnectionMode(SINGLE);		/* 0 = Single; 1 = Multi */
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	0e 94 02 03 	call	0x604	; 0x604 <ESP8266_ConnectionMode>
	ESP8266_ApplicationMode(NORMAL);	/* 0 = Normal Mode; 1 = Transperant Mode */
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	0e 94 c1 02 	call	0x582	; 0x582 <ESP8266_ApplicationMode>
	if(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP)
     bfa:	0e 94 2e 04 	call	0x85c	; 0x85c <ESP8266_connected>
     bfe:	83 30       	cpi	r24, 0x03	; 3
     c00:	31 f4       	brne	.+12     	; 0xc0e <main+0x72>
	ESP8266_JoinAccessPoint(SSID, PASSWORD);
     c02:	80 eb       	ldi	r24, 0xB0	; 176
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	6f eb       	ldi	r22, 0xBF	; 191
     c08:	71 e0       	ldi	r23, 0x01	; 1
     c0a:	0e 94 bb 03 	call	0x776	; 0x776 <ESP8266_JoinAccessPoint>
	ESP8266_Start(0, DOMAIN, PORT);
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	69 ec       	ldi	r22, 0xC9	; 201
     c12:	71 e0       	ldi	r23, 0x01	; 1
     c14:	4c ed       	ldi	r20, 0xDC	; 220
     c16:	51 e0       	ldi	r21, 0x01	; 1
     c18:	0e 94 5e 04 	call	0x8bc	; 0x8bc <ESP8266_Start>
     c1c:	00 e0       	ldi	r16, 0x00	; 0
     c1e:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{	
		for(i=0;i<=49;i++)
     c20:	66 24       	eor	r6, r6
     c22:	77 24       	eor	r7, r7
		ESP8266_JoinAccessPoint(SSID, PASSWORD);
		if(Connect_Status == ESP8266_TRANSMISSION_DISCONNECTED)
		ESP8266_Start(0, DOMAIN, PORT);

		#ifdef SEND_DEMO
		memset(_buffer, 0, 150);
     c24:	2e 01       	movw	r4, r28
     c26:	08 94       	sec
     c28:	41 1c       	adc	r4, r1
     c2a:	51 1c       	adc	r5, r1
     c2c:	22 24       	eor	r2, r2
     c2e:	33 24       	eor	r3, r3
     c30:	80 c0       	rjmp	.+256    	; 0xd32 <main+0x196>
	{	
		for(i=0;i<=49;i++)
		{
			while(1)
			{
				if(PIND & (1<<PD2))
     c32:	82 9b       	sbis	0x10, 2	; 16
     c34:	fe cf       	rjmp	.-4      	; 0xc32 <main+0x96>
				{
					TCNT1=0;
     c36:	1d bc       	out	0x2d, r1	; 45
     c38:	1c bc       	out	0x2c, r1	; 44
					TCCR1B = 0x01;
     c3a:	21 e0       	ldi	r18, 0x01	; 1
     c3c:	2e bd       	out	0x2e, r18	; 46
					continue;
				}
			}
			while(1)
			{
				if(PIND & (1<<PD3))
     c3e:	83 9b       	sbis	0x10, 3	; 16
     c40:	fe cf       	rjmp	.-4      	; 0xc3e <main+0xa2>
				{
					TCCR1B = 0x00;
     c42:	1e bc       	out	0x2e, r1	; 46
					g=TCNT1;
     c44:	6c b5       	in	r22, 0x2c	; 44
     c46:	7d b5       	in	r23, 0x2d	; 45
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__floatunsisf>
				else
				{
					continue;
				}
			}
			g=g+1;
     c50:	46 2f       	mov	r20, r22
     c52:	57 2f       	mov	r21, r23
     c54:	68 2f       	mov	r22, r24
     c56:	79 2f       	mov	r23, r25
     c58:	cb 01       	movw	r24, r22
     c5a:	ba 01       	movw	r22, r20
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e8       	ldi	r20, 0x80	; 128
     c62:	5f e3       	ldi	r21, 0x3F	; 63
     c64:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
			g=(float)g/1000000;
     c68:	46 2f       	mov	r20, r22
     c6a:	57 2f       	mov	r21, r23
     c6c:	68 2f       	mov	r22, r24
     c6e:	79 2f       	mov	r23, r25
     c70:	cb 01       	movw	r24, r22
     c72:	ba 01       	movw	r22, r20
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	34 e2       	ldi	r19, 0x24	; 36
     c78:	44 e7       	ldi	r20, 0x74	; 116
     c7a:	59 e4       	ldi	r21, 0x49	; 73
     c7c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__divsf3>
			g=g*50*360*(3.14/180);
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	48 e4       	ldi	r20, 0x48	; 72
     c86:	52 e4       	ldi	r21, 0x42	; 66
     c88:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__mulsf3>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	44 eb       	ldi	r20, 0xB4	; 180
     c92:	53 e4       	ldi	r21, 0x43	; 67
     c94:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__mulsf3>
     c98:	46 2f       	mov	r20, r22
     c9a:	57 2f       	mov	r21, r23
     c9c:	68 2f       	mov	r22, r24
     c9e:	79 2f       	mov	r23, r25
     ca0:	cb 01       	movw	r24, r22
     ca2:	ba 01       	movw	r22, r20
     ca4:	27 ea       	ldi	r18, 0xA7	; 167
     ca6:	37 ee       	ldi	r19, 0xE7	; 231
     ca8:	4e e8       	ldi	r20, 0x8E	; 142
     caa:	5c e3       	ldi	r21, 0x3C	; 60
     cac:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__mulsf3>
			g = cos(g);
     cb0:	46 2f       	mov	r20, r22
     cb2:	57 2f       	mov	r21, r23
     cb4:	68 2f       	mov	r22, r24
     cb6:	79 2f       	mov	r23, r25
     cb8:	cb 01       	movw	r24, r22
     cba:	ba 01       	movw	r22, r20
     cbc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <cos>
			g=abs(ceil(g*100));
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	48 ec       	ldi	r20, 0xC8	; 200
     cc6:	52 e4       	ldi	r21, 0x42	; 66
     cc8:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__mulsf3>
     ccc:	0e 94 bc 07 	call	0xf78	; 0xf78 <ceil>
     cd0:	6b 01       	movw	r12, r22
     cd2:	7c 01       	movw	r14, r24
			a=a+g;
     cd4:	b8 01       	movw	r22, r16
     cd6:	88 27       	eor	r24, r24
     cd8:	77 fd       	sbrc	r23, 7
     cda:	80 95       	com	r24
     cdc:	98 2f       	mov	r25, r24
     cde:	0e 94 6d 08 	call	0x10da	; 0x10da <__floatsisf>
     ce2:	4b 01       	movw	r8, r22
     ce4:	5c 01       	movw	r10, r24
			}
			g=g+1;
			g=(float)g/1000000;
			g=g*50*360*(3.14/180);
			g = cos(g);
			g=abs(ceil(g*100));
     ce6:	c7 01       	movw	r24, r14
     ce8:	b6 01       	movw	r22, r12
     cea:	0e 94 3a 08 	call	0x1074	; 0x1074 <__fixsfsi>
     cee:	86 2f       	mov	r24, r22
     cf0:	97 2f       	mov	r25, r23
     cf2:	99 23       	and	r25, r25
     cf4:	1c f4       	brge	.+6      	; 0xcfc <main+0x160>
     cf6:	90 95       	com	r25
     cf8:	81 95       	neg	r24
     cfa:	9f 4f       	sbci	r25, 0xFF	; 255
     cfc:	dc 01       	movw	r26, r24
     cfe:	bd 01       	movw	r22, r26
     d00:	88 27       	eor	r24, r24
     d02:	77 fd       	sbrc	r23, 7
     d04:	80 95       	com	r24
     d06:	98 2f       	mov	r25, r24
     d08:	0e 94 6d 08 	call	0x10da	; 0x10da <__floatsisf>
     d0c:	9b 01       	movw	r18, r22
     d0e:	ac 01       	movw	r20, r24
			a=a+g;
     d10:	c5 01       	movw	r24, r10
     d12:	b4 01       	movw	r22, r8
     d14:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     d18:	46 2f       	mov	r20, r22
     d1a:	57 2f       	mov	r21, r23
     d1c:	68 2f       	mov	r22, r24
     d1e:	79 2f       	mov	r23, r25
     d20:	cb 01       	movw	r24, r22
     d22:	ba 01       	movw	r22, r20
     d24:	0e 94 3a 08 	call	0x1074	; 0x1074 <__fixsfsi>
     d28:	8b 01       	movw	r16, r22
     d2a:	9c 01       	movw	r18, r24
	if(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP)
	ESP8266_JoinAccessPoint(SSID, PASSWORD);
	ESP8266_Start(0, DOMAIN, PORT);
	while(1)
	{	
		for(i=0;i<=49;i++)
     d2c:	08 94       	sec
     d2e:	61 1c       	adc	r6, r1
     d30:	71 1c       	adc	r7, r1
     d32:	b2 e3       	ldi	r27, 0x32	; 50
     d34:	6b 16       	cp	r6, r27
     d36:	71 04       	cpc	r7, r1
     d38:	0c f4       	brge	.+2      	; 0xd3c <main+0x1a0>
     d3a:	7b cf       	rjmp	.-266    	; 0xc32 <main+0x96>
			g=g*50*360*(3.14/180);
			g = cos(g);
			g=abs(ceil(g*100));
			a=a+g;
		}
		a=a/50;
     d3c:	c8 01       	movw	r24, r16
     d3e:	62 e3       	ldi	r22, 0x32	; 50
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__divmodhi4>
     d46:	7b 01       	movw	r14, r22
     d48:	8b 01       	movw	r16, r22
		itoa(a, value, 10);
     d4a:	cb 01       	movw	r24, r22
     d4c:	be 01       	movw	r22, r28
     d4e:	69 56       	subi	r22, 0x69	; 105
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	4a e0       	ldi	r20, 0x0A	; 10
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	0e 94 ab 0a 	call	0x1556	; 0x1556 <itoa>
		LCD_Clear();
     d5a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_Clear>
		LCD_String("Power Factor: ");
     d5e:	8f ed       	ldi	r24, 0xDF	; 223
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_String>
		LCD_String(value);
     d66:	ce 01       	movw	r24, r28
     d68:	89 56       	subi	r24, 0x69	; 105
     d6a:	9f 4f       	sbci	r25, 0xFF	; 255
     d6c:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_String>
		if((a<=90)&(a>80))
     d70:	c7 01       	movw	r24, r14
     d72:	81 55       	subi	r24, 0x51	; 81
     d74:	90 40       	sbci	r25, 0x00	; 0
     d76:	8a 30       	cpi	r24, 0x0A	; 10
     d78:	91 05       	cpc	r25, r1
     d7a:	20 f4       	brcc	.+8      	; 0xd84 <main+0x1e8>
		{
			PORTC &= ~0x03;
     d7c:	85 b3       	in	r24, 0x15	; 21
     d7e:	8c 7f       	andi	r24, 0xFC	; 252
     d80:	85 bb       	out	0x15, r24	; 21
     d82:	0a c0       	rjmp	.+20     	; 0xd98 <main+0x1fc>
		}
		else
		{
			if(a<=80)
     d84:	01 35       	cpi	r16, 0x51	; 81
     d86:	11 05       	cpc	r17, r1
     d88:	24 f4       	brge	.+8      	; 0xd92 <main+0x1f6>
			{
			PORTC &= ~0x07;
     d8a:	85 b3       	in	r24, 0x15	; 21
     d8c:	88 7f       	andi	r24, 0xF8	; 248
     d8e:	85 bb       	out	0x15, r24	; 21
     d90:	03 c0       	rjmp	.+6      	; 0xd98 <main+0x1fc>
			}			
			else
			{
				PORTC |= 0x07;
     d92:	85 b3       	in	r24, 0x15	; 21
     d94:	87 60       	ori	r24, 0x07	; 7
     d96:	85 bb       	out	0x15, r24	; 21
			}
		}
		Connect_Status = ESP8266_connected();
     d98:	0e 94 2e 04 	call	0x85c	; 0x85c <ESP8266_connected>
		if(Connect_Status == ESP8266_NOT_CONNECTED_TO_AP)
     d9c:	83 30       	cpi	r24, 0x03	; 3
     d9e:	39 f4       	brne	.+14     	; 0xdae <main+0x212>
		ESP8266_JoinAccessPoint(SSID, PASSWORD);
     da0:	80 eb       	ldi	r24, 0xB0	; 176
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	6f eb       	ldi	r22, 0xBF	; 191
     da6:	71 e0       	ldi	r23, 0x01	; 1
     da8:	0e 94 bb 03 	call	0x776	; 0x776 <ESP8266_JoinAccessPoint>
     dac:	09 c0       	rjmp	.+18     	; 0xdc0 <main+0x224>
		if(Connect_Status == ESP8266_TRANSMISSION_DISCONNECTED)
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	39 f4       	brne	.+14     	; 0xdc0 <main+0x224>
		ESP8266_Start(0, DOMAIN, PORT);
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	69 ec       	ldi	r22, 0xC9	; 201
     db6:	71 e0       	ldi	r23, 0x01	; 1
     db8:	4c ed       	ldi	r20, 0xDC	; 220
     dba:	51 e0       	ldi	r21, 0x01	; 1
     dbc:	0e 94 5e 04 	call	0x8bc	; 0x8bc <ESP8266_Start>

		#ifdef SEND_DEMO
		memset(_buffer, 0, 150);
     dc0:	f2 01       	movw	r30, r4
     dc2:	26 e9       	ldi	r18, 0x96	; 150
     dc4:	11 92       	st	Z+, r1
     dc6:	2a 95       	dec	r18
     dc8:	e9 f7       	brne	.-6      	; 0xdc4 <main+0x228>
		sprintf(_buffer, "GET /update?api_key=%s&field1=%d", API_WRITE_KEY, a);
     dca:	8d b7       	in	r24, 0x3d	; 61
     dcc:	9e b7       	in	r25, 0x3e	; 62
     dce:	08 97       	sbiw	r24, 0x08	; 8
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	9e bf       	out	0x3e, r25	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	8d bf       	out	0x3d, r24	; 61
     dda:	ed b7       	in	r30, 0x3d	; 61
     ddc:	fe b7       	in	r31, 0x3e	; 62
     dde:	31 96       	adiw	r30, 0x01	; 1
     de0:	ad b7       	in	r26, 0x3d	; 61
     de2:	be b7       	in	r27, 0x3e	; 62
     de4:	12 96       	adiw	r26, 0x02	; 2
     de6:	5c 92       	st	X, r5
     de8:	4e 92       	st	-X, r4
     dea:	11 97       	sbiw	r26, 0x01	; 1
     dec:	2e ee       	ldi	r18, 0xEE	; 238
     dee:	31 e0       	ldi	r19, 0x01	; 1
     df0:	33 83       	std	Z+3, r19	; 0x03
     df2:	22 83       	std	Z+2, r18	; 0x02
     df4:	8f e0       	ldi	r24, 0x0F	; 15
     df6:	92 e0       	ldi	r25, 0x02	; 2
     df8:	95 83       	std	Z+5, r25	; 0x05
     dfa:	84 83       	std	Z+4, r24	; 0x04
     dfc:	f7 82       	std	Z+7, r15	; 0x07
     dfe:	e6 82       	std	Z+6, r14	; 0x06
     e00:	0e 94 cc 0a 	call	0x1598	; 0x1598 <sprintf>
		ESP8266_Send(_buffer);	/* Thingspeak server delay */
     e04:	ad b7       	in	r26, 0x3d	; 61
     e06:	be b7       	in	r27, 0x3e	; 62
     e08:	18 96       	adiw	r26, 0x08	; 8
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	be bf       	out	0x3e, r27	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	ad bf       	out	0x3d, r26	; 61
     e14:	c2 01       	movw	r24, r4
     e16:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <ESP8266_Send>
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	93 ed       	ldi	r25, 0xD3	; 211
     e1e:	a0 e3       	ldi	r26, 0x30	; 48
     e20:	81 50       	subi	r24, 0x01	; 1
     e22:	90 40       	sbci	r25, 0x00	; 0
     e24:	a0 40       	sbci	r26, 0x00	; 0
     e26:	e1 f7       	brne	.-8      	; 0xe20 <main+0x284>
     e28:	00 c0       	rjmp	.+0      	; 0xe2a <main+0x28e>
     e2a:	00 00       	nop
     e2c:	81 01       	movw	r16, r2
	if(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP)
	ESP8266_JoinAccessPoint(SSID, PASSWORD);
	ESP8266_Start(0, DOMAIN, PORT);
	while(1)
	{	
		for(i=0;i<=49;i++)
     e2e:	31 01       	movw	r6, r2
     e30:	80 cf       	rjmp	.-256    	; 0xd32 <main+0x196>

00000e32 <USART_Init>:
#include "USART_RS232_H_file.h"						/* Include USART header file */

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{
#ifdef DOUBLE_SPEED_MODE
	UCSRA |=(1 << U2X);
     e32:	59 9a       	sbi	0x0b, 1	; 11
#endif
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);	/* Enable USART transmitter and receiver */
     e34:	2a b1       	in	r18, 0x0a	; 10
     e36:	28 69       	ori	r18, 0x98	; 152
     e38:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */ 
     e3a:	20 b5       	in	r18, 0x20	; 32
     e3c:	26 68       	ori	r18, 0x86	; 134
     e3e:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
     e40:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__floatunsisf>
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__mulsf3>
     e50:	9b 01       	movw	r18, r22
     e52:	ac 01       	movw	r20, r24
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	74 e2       	ldi	r23, 0x24	; 36
     e58:	84 e7       	ldi	r24, 0x74	; 116
     e5a:	9b e4       	ldi	r25, 0x4B	; 75
     e5c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__divsf3>
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e8       	ldi	r20, 0x80	; 128
     e66:	5f e3       	ldi	r21, 0x3F	; 63
     e68:	0e 94 57 07 	call	0xeae	; 0xeae <__subsf3>
     e6c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <round>
     e70:	0e 94 3a 08 	call	0x1074	; 0x1074 <__fixsfsi>
     e74:	69 b9       	out	0x09, r22	; 9
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
     e76:	67 2f       	mov	r22, r23
     e78:	77 0f       	add	r23, r23
     e7a:	77 0b       	sbc	r23, r23
     e7c:	60 bd       	out	0x20, r22	; 32
}
     e7e:	08 95       	ret

00000e80 <USART_RxChar>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
     e80:	5f 9b       	sbis	0x0b, 7	; 11
     e82:	fe cf       	rjmp	.-4      	; 0xe80 <USART_RxChar>
	return(UDR);									/* Get and return received data */ 
     e84:	8c b1       	in	r24, 0x0c	; 12
}
     e86:	08 95       	ret

00000e88 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
     e88:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     e8a:	5d 9b       	sbis	0x0b, 5	; 11
     e8c:	fe cf       	rjmp	.-4      	; 0xe8a <USART_TxChar+0x2>
}
     e8e:	08 95       	ret

00000e90 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	ec 01       	movw	r28, r24
	int i=0;																	
	while (str[i]!=0)
     e96:	88 81       	ld	r24, Y
     e98:	88 23       	and	r24, r24
     e9a:	31 f0       	breq	.+12     	; 0xea8 <USART_SendString+0x18>
{
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
     e9c:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;																	
	while (str[i]!=0)
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     e9e:	0e 94 44 07 	call	0xe88	; 0xe88 <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
     ea2:	89 91       	ld	r24, Y+
     ea4:	88 23       	and	r24, r24
     ea6:	d9 f7       	brne	.-10     	; 0xe9e <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <__subsf3>:
     eae:	50 58       	subi	r21, 0x80	; 128

00000eb0 <__addsf3>:
     eb0:	bb 27       	eor	r27, r27
     eb2:	aa 27       	eor	r26, r26
     eb4:	0e d0       	rcall	.+28     	; 0xed2 <__addsf3x>
     eb6:	b4 c1       	rjmp	.+872    	; 0x1220 <__fp_round>
     eb8:	7d d1       	rcall	.+762    	; 0x11b4 <__fp_pscA>
     eba:	30 f0       	brcs	.+12     	; 0xec8 <__addsf3+0x18>
     ebc:	82 d1       	rcall	.+772    	; 0x11c2 <__fp_pscB>
     ebe:	20 f0       	brcs	.+8      	; 0xec8 <__addsf3+0x18>
     ec0:	31 f4       	brne	.+12     	; 0xece <__addsf3+0x1e>
     ec2:	9f 3f       	cpi	r25, 0xFF	; 255
     ec4:	11 f4       	brne	.+4      	; 0xeca <__addsf3+0x1a>
     ec6:	1e f4       	brtc	.+6      	; 0xece <__addsf3+0x1e>
     ec8:	72 c1       	rjmp	.+740    	; 0x11ae <__fp_nan>
     eca:	0e f4       	brtc	.+2      	; 0xece <__addsf3+0x1e>
     ecc:	e0 95       	com	r30
     ece:	e7 fb       	bst	r30, 7
     ed0:	3f c1       	rjmp	.+638    	; 0x1150 <__fp_inf>

00000ed2 <__addsf3x>:
     ed2:	e9 2f       	mov	r30, r25
     ed4:	c7 d1       	rcall	.+910    	; 0x1264 <__fp_split3>
     ed6:	80 f3       	brcs	.-32     	; 0xeb8 <__addsf3+0x8>
     ed8:	ba 17       	cp	r27, r26
     eda:	62 07       	cpc	r22, r18
     edc:	73 07       	cpc	r23, r19
     ede:	84 07       	cpc	r24, r20
     ee0:	95 07       	cpc	r25, r21
     ee2:	18 f0       	brcs	.+6      	; 0xeea <__addsf3x+0x18>
     ee4:	71 f4       	brne	.+28     	; 0xf02 <__addsf3x+0x30>
     ee6:	9e f5       	brtc	.+102    	; 0xf4e <__addsf3x+0x7c>
     ee8:	f6 c1       	rjmp	.+1004   	; 0x12d6 <__fp_zero>
     eea:	0e f4       	brtc	.+2      	; 0xeee <__addsf3x+0x1c>
     eec:	e0 95       	com	r30
     eee:	0b 2e       	mov	r0, r27
     ef0:	ba 2f       	mov	r27, r26
     ef2:	a0 2d       	mov	r26, r0
     ef4:	0b 01       	movw	r0, r22
     ef6:	b9 01       	movw	r22, r18
     ef8:	90 01       	movw	r18, r0
     efa:	0c 01       	movw	r0, r24
     efc:	ca 01       	movw	r24, r20
     efe:	a0 01       	movw	r20, r0
     f00:	11 24       	eor	r1, r1
     f02:	ff 27       	eor	r31, r31
     f04:	59 1b       	sub	r21, r25
     f06:	99 f0       	breq	.+38     	; 0xf2e <__addsf3x+0x5c>
     f08:	59 3f       	cpi	r21, 0xF9	; 249
     f0a:	50 f4       	brcc	.+20     	; 0xf20 <__addsf3x+0x4e>
     f0c:	50 3e       	cpi	r21, 0xE0	; 224
     f0e:	68 f1       	brcs	.+90     	; 0xf6a <__addsf3x+0x98>
     f10:	1a 16       	cp	r1, r26
     f12:	f0 40       	sbci	r31, 0x00	; 0
     f14:	a2 2f       	mov	r26, r18
     f16:	23 2f       	mov	r18, r19
     f18:	34 2f       	mov	r19, r20
     f1a:	44 27       	eor	r20, r20
     f1c:	58 5f       	subi	r21, 0xF8	; 248
     f1e:	f3 cf       	rjmp	.-26     	; 0xf06 <__addsf3x+0x34>
     f20:	46 95       	lsr	r20
     f22:	37 95       	ror	r19
     f24:	27 95       	ror	r18
     f26:	a7 95       	ror	r26
     f28:	f0 40       	sbci	r31, 0x00	; 0
     f2a:	53 95       	inc	r21
     f2c:	c9 f7       	brne	.-14     	; 0xf20 <__addsf3x+0x4e>
     f2e:	7e f4       	brtc	.+30     	; 0xf4e <__addsf3x+0x7c>
     f30:	1f 16       	cp	r1, r31
     f32:	ba 0b       	sbc	r27, r26
     f34:	62 0b       	sbc	r22, r18
     f36:	73 0b       	sbc	r23, r19
     f38:	84 0b       	sbc	r24, r20
     f3a:	ba f0       	brmi	.+46     	; 0xf6a <__addsf3x+0x98>
     f3c:	91 50       	subi	r25, 0x01	; 1
     f3e:	a1 f0       	breq	.+40     	; 0xf68 <__addsf3x+0x96>
     f40:	ff 0f       	add	r31, r31
     f42:	bb 1f       	adc	r27, r27
     f44:	66 1f       	adc	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	88 1f       	adc	r24, r24
     f4a:	c2 f7       	brpl	.-16     	; 0xf3c <__addsf3x+0x6a>
     f4c:	0e c0       	rjmp	.+28     	; 0xf6a <__addsf3x+0x98>
     f4e:	ba 0f       	add	r27, r26
     f50:	62 1f       	adc	r22, r18
     f52:	73 1f       	adc	r23, r19
     f54:	84 1f       	adc	r24, r20
     f56:	48 f4       	brcc	.+18     	; 0xf6a <__addsf3x+0x98>
     f58:	87 95       	ror	r24
     f5a:	77 95       	ror	r23
     f5c:	67 95       	ror	r22
     f5e:	b7 95       	ror	r27
     f60:	f7 95       	ror	r31
     f62:	9e 3f       	cpi	r25, 0xFE	; 254
     f64:	08 f0       	brcs	.+2      	; 0xf68 <__addsf3x+0x96>
     f66:	b3 cf       	rjmp	.-154    	; 0xece <__addsf3+0x1e>
     f68:	93 95       	inc	r25
     f6a:	88 0f       	add	r24, r24
     f6c:	08 f0       	brcs	.+2      	; 0xf70 <__addsf3x+0x9e>
     f6e:	99 27       	eor	r25, r25
     f70:	ee 0f       	add	r30, r30
     f72:	97 95       	ror	r25
     f74:	87 95       	ror	r24
     f76:	08 95       	ret

00000f78 <ceil>:
     f78:	97 d1       	rcall	.+814    	; 0x12a8 <__fp_trunc>
     f7a:	80 f0       	brcs	.+32     	; 0xf9c <ceil+0x24>
     f7c:	9f 37       	cpi	r25, 0x7F	; 127
     f7e:	40 f4       	brcc	.+16     	; 0xf90 <ceil+0x18>
     f80:	91 11       	cpse	r25, r1
     f82:	0e f4       	brtc	.+2      	; 0xf86 <ceil+0xe>
     f84:	a9 c1       	rjmp	.+850    	; 0x12d8 <__fp_szero>
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	80 e8       	ldi	r24, 0x80	; 128
     f8c:	9f e3       	ldi	r25, 0x3F	; 63
     f8e:	08 95       	ret
     f90:	26 f0       	brts	.+8      	; 0xf9a <ceil+0x22>
     f92:	1b 16       	cp	r1, r27
     f94:	61 1d       	adc	r22, r1
     f96:	71 1d       	adc	r23, r1
     f98:	81 1d       	adc	r24, r1
     f9a:	e0 c0       	rjmp	.+448    	; 0x115c <__fp_mintl>
     f9c:	fa c0       	rjmp	.+500    	; 0x1192 <__fp_mpack>

00000f9e <cos>:
     f9e:	19 d1       	rcall	.+562    	; 0x11d2 <__fp_rempio2>
     fa0:	e3 95       	inc	r30
     fa2:	4f c1       	rjmp	.+670    	; 0x1242 <__fp_sinus>

00000fa4 <__divsf3>:
     fa4:	0c d0       	rcall	.+24     	; 0xfbe <__divsf3x>
     fa6:	3c c1       	rjmp	.+632    	; 0x1220 <__fp_round>
     fa8:	0c d1       	rcall	.+536    	; 0x11c2 <__fp_pscB>
     faa:	40 f0       	brcs	.+16     	; 0xfbc <__divsf3+0x18>
     fac:	03 d1       	rcall	.+518    	; 0x11b4 <__fp_pscA>
     fae:	30 f0       	brcs	.+12     	; 0xfbc <__divsf3+0x18>
     fb0:	21 f4       	brne	.+8      	; 0xfba <__divsf3+0x16>
     fb2:	5f 3f       	cpi	r21, 0xFF	; 255
     fb4:	19 f0       	breq	.+6      	; 0xfbc <__divsf3+0x18>
     fb6:	cc c0       	rjmp	.+408    	; 0x1150 <__fp_inf>
     fb8:	51 11       	cpse	r21, r1
     fba:	8e c1       	rjmp	.+796    	; 0x12d8 <__fp_szero>
     fbc:	f8 c0       	rjmp	.+496    	; 0x11ae <__fp_nan>

00000fbe <__divsf3x>:
     fbe:	52 d1       	rcall	.+676    	; 0x1264 <__fp_split3>
     fc0:	98 f3       	brcs	.-26     	; 0xfa8 <__divsf3+0x4>

00000fc2 <__divsf3_pse>:
     fc2:	99 23       	and	r25, r25
     fc4:	c9 f3       	breq	.-14     	; 0xfb8 <__divsf3+0x14>
     fc6:	55 23       	and	r21, r21
     fc8:	b1 f3       	breq	.-20     	; 0xfb6 <__divsf3+0x12>
     fca:	95 1b       	sub	r25, r21
     fcc:	55 0b       	sbc	r21, r21
     fce:	bb 27       	eor	r27, r27
     fd0:	aa 27       	eor	r26, r26
     fd2:	62 17       	cp	r22, r18
     fd4:	73 07       	cpc	r23, r19
     fd6:	84 07       	cpc	r24, r20
     fd8:	38 f0       	brcs	.+14     	; 0xfe8 <__divsf3_pse+0x26>
     fda:	9f 5f       	subi	r25, 0xFF	; 255
     fdc:	5f 4f       	sbci	r21, 0xFF	; 255
     fde:	22 0f       	add	r18, r18
     fe0:	33 1f       	adc	r19, r19
     fe2:	44 1f       	adc	r20, r20
     fe4:	aa 1f       	adc	r26, r26
     fe6:	a9 f3       	breq	.-22     	; 0xfd2 <__divsf3_pse+0x10>
     fe8:	33 d0       	rcall	.+102    	; 0x1050 <__divsf3_pse+0x8e>
     fea:	0e 2e       	mov	r0, r30
     fec:	3a f0       	brmi	.+14     	; 0xffc <__divsf3_pse+0x3a>
     fee:	e0 e8       	ldi	r30, 0x80	; 128
     ff0:	30 d0       	rcall	.+96     	; 0x1052 <__divsf3_pse+0x90>
     ff2:	91 50       	subi	r25, 0x01	; 1
     ff4:	50 40       	sbci	r21, 0x00	; 0
     ff6:	e6 95       	lsr	r30
     ff8:	00 1c       	adc	r0, r0
     ffa:	ca f7       	brpl	.-14     	; 0xfee <__divsf3_pse+0x2c>
     ffc:	29 d0       	rcall	.+82     	; 0x1050 <__divsf3_pse+0x8e>
     ffe:	fe 2f       	mov	r31, r30
    1000:	27 d0       	rcall	.+78     	; 0x1050 <__divsf3_pse+0x8e>
    1002:	66 0f       	add	r22, r22
    1004:	77 1f       	adc	r23, r23
    1006:	88 1f       	adc	r24, r24
    1008:	bb 1f       	adc	r27, r27
    100a:	26 17       	cp	r18, r22
    100c:	37 07       	cpc	r19, r23
    100e:	48 07       	cpc	r20, r24
    1010:	ab 07       	cpc	r26, r27
    1012:	b0 e8       	ldi	r27, 0x80	; 128
    1014:	09 f0       	breq	.+2      	; 0x1018 <__divsf3_pse+0x56>
    1016:	bb 0b       	sbc	r27, r27
    1018:	80 2d       	mov	r24, r0
    101a:	bf 01       	movw	r22, r30
    101c:	ff 27       	eor	r31, r31
    101e:	93 58       	subi	r25, 0x83	; 131
    1020:	5f 4f       	sbci	r21, 0xFF	; 255
    1022:	2a f0       	brmi	.+10     	; 0x102e <__divsf3_pse+0x6c>
    1024:	9e 3f       	cpi	r25, 0xFE	; 254
    1026:	51 05       	cpc	r21, r1
    1028:	68 f0       	brcs	.+26     	; 0x1044 <__divsf3_pse+0x82>
    102a:	92 c0       	rjmp	.+292    	; 0x1150 <__fp_inf>
    102c:	55 c1       	rjmp	.+682    	; 0x12d8 <__fp_szero>
    102e:	5f 3f       	cpi	r21, 0xFF	; 255
    1030:	ec f3       	brlt	.-6      	; 0x102c <__divsf3_pse+0x6a>
    1032:	98 3e       	cpi	r25, 0xE8	; 232
    1034:	dc f3       	brlt	.-10     	; 0x102c <__divsf3_pse+0x6a>
    1036:	86 95       	lsr	r24
    1038:	77 95       	ror	r23
    103a:	67 95       	ror	r22
    103c:	b7 95       	ror	r27
    103e:	f7 95       	ror	r31
    1040:	9f 5f       	subi	r25, 0xFF	; 255
    1042:	c9 f7       	brne	.-14     	; 0x1036 <__divsf3_pse+0x74>
    1044:	88 0f       	add	r24, r24
    1046:	91 1d       	adc	r25, r1
    1048:	96 95       	lsr	r25
    104a:	87 95       	ror	r24
    104c:	97 f9       	bld	r25, 7
    104e:	08 95       	ret
    1050:	e1 e0       	ldi	r30, 0x01	; 1
    1052:	66 0f       	add	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	bb 1f       	adc	r27, r27
    105a:	62 17       	cp	r22, r18
    105c:	73 07       	cpc	r23, r19
    105e:	84 07       	cpc	r24, r20
    1060:	ba 07       	cpc	r27, r26
    1062:	20 f0       	brcs	.+8      	; 0x106c <__divsf3_pse+0xaa>
    1064:	62 1b       	sub	r22, r18
    1066:	73 0b       	sbc	r23, r19
    1068:	84 0b       	sbc	r24, r20
    106a:	ba 0b       	sbc	r27, r26
    106c:	ee 1f       	adc	r30, r30
    106e:	88 f7       	brcc	.-30     	; 0x1052 <__divsf3_pse+0x90>
    1070:	e0 95       	com	r30
    1072:	08 95       	ret

00001074 <__fixsfsi>:
    1074:	04 d0       	rcall	.+8      	; 0x107e <__fixunssfsi>
    1076:	68 94       	set
    1078:	b1 11       	cpse	r27, r1
    107a:	2e c1       	rjmp	.+604    	; 0x12d8 <__fp_szero>
    107c:	08 95       	ret

0000107e <__fixunssfsi>:
    107e:	fa d0       	rcall	.+500    	; 0x1274 <__fp_splitA>
    1080:	88 f0       	brcs	.+34     	; 0x10a4 <__fixunssfsi+0x26>
    1082:	9f 57       	subi	r25, 0x7F	; 127
    1084:	90 f0       	brcs	.+36     	; 0x10aa <__fixunssfsi+0x2c>
    1086:	b9 2f       	mov	r27, r25
    1088:	99 27       	eor	r25, r25
    108a:	b7 51       	subi	r27, 0x17	; 23
    108c:	a0 f0       	brcs	.+40     	; 0x10b6 <__fixunssfsi+0x38>
    108e:	d1 f0       	breq	.+52     	; 0x10c4 <__fixunssfsi+0x46>
    1090:	66 0f       	add	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	88 1f       	adc	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	1a f0       	brmi	.+6      	; 0x10a0 <__fixunssfsi+0x22>
    109a:	ba 95       	dec	r27
    109c:	c9 f7       	brne	.-14     	; 0x1090 <__fixunssfsi+0x12>
    109e:	12 c0       	rjmp	.+36     	; 0x10c4 <__fixunssfsi+0x46>
    10a0:	b1 30       	cpi	r27, 0x01	; 1
    10a2:	81 f0       	breq	.+32     	; 0x10c4 <__fixunssfsi+0x46>
    10a4:	18 d1       	rcall	.+560    	; 0x12d6 <__fp_zero>
    10a6:	b1 e0       	ldi	r27, 0x01	; 1
    10a8:	08 95       	ret
    10aa:	15 c1       	rjmp	.+554    	; 0x12d6 <__fp_zero>
    10ac:	67 2f       	mov	r22, r23
    10ae:	78 2f       	mov	r23, r24
    10b0:	88 27       	eor	r24, r24
    10b2:	b8 5f       	subi	r27, 0xF8	; 248
    10b4:	39 f0       	breq	.+14     	; 0x10c4 <__fixunssfsi+0x46>
    10b6:	b9 3f       	cpi	r27, 0xF9	; 249
    10b8:	cc f3       	brlt	.-14     	; 0x10ac <__fixunssfsi+0x2e>
    10ba:	86 95       	lsr	r24
    10bc:	77 95       	ror	r23
    10be:	67 95       	ror	r22
    10c0:	b3 95       	inc	r27
    10c2:	d9 f7       	brne	.-10     	; 0x10ba <__fixunssfsi+0x3c>
    10c4:	3e f4       	brtc	.+14     	; 0x10d4 <__fixunssfsi+0x56>
    10c6:	90 95       	com	r25
    10c8:	80 95       	com	r24
    10ca:	70 95       	com	r23
    10cc:	61 95       	neg	r22
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	8f 4f       	sbci	r24, 0xFF	; 255
    10d2:	9f 4f       	sbci	r25, 0xFF	; 255
    10d4:	08 95       	ret

000010d6 <__floatunsisf>:
    10d6:	e8 94       	clt
    10d8:	09 c0       	rjmp	.+18     	; 0x10ec <__floatsisf+0x12>

000010da <__floatsisf>:
    10da:	97 fb       	bst	r25, 7
    10dc:	3e f4       	brtc	.+14     	; 0x10ec <__floatsisf+0x12>
    10de:	90 95       	com	r25
    10e0:	80 95       	com	r24
    10e2:	70 95       	com	r23
    10e4:	61 95       	neg	r22
    10e6:	7f 4f       	sbci	r23, 0xFF	; 255
    10e8:	8f 4f       	sbci	r24, 0xFF	; 255
    10ea:	9f 4f       	sbci	r25, 0xFF	; 255
    10ec:	99 23       	and	r25, r25
    10ee:	a9 f0       	breq	.+42     	; 0x111a <__floatsisf+0x40>
    10f0:	f9 2f       	mov	r31, r25
    10f2:	96 e9       	ldi	r25, 0x96	; 150
    10f4:	bb 27       	eor	r27, r27
    10f6:	93 95       	inc	r25
    10f8:	f6 95       	lsr	r31
    10fa:	87 95       	ror	r24
    10fc:	77 95       	ror	r23
    10fe:	67 95       	ror	r22
    1100:	b7 95       	ror	r27
    1102:	f1 11       	cpse	r31, r1
    1104:	f8 cf       	rjmp	.-16     	; 0x10f6 <__floatsisf+0x1c>
    1106:	fa f4       	brpl	.+62     	; 0x1146 <__floatsisf+0x6c>
    1108:	bb 0f       	add	r27, r27
    110a:	11 f4       	brne	.+4      	; 0x1110 <__floatsisf+0x36>
    110c:	60 ff       	sbrs	r22, 0
    110e:	1b c0       	rjmp	.+54     	; 0x1146 <__floatsisf+0x6c>
    1110:	6f 5f       	subi	r22, 0xFF	; 255
    1112:	7f 4f       	sbci	r23, 0xFF	; 255
    1114:	8f 4f       	sbci	r24, 0xFF	; 255
    1116:	9f 4f       	sbci	r25, 0xFF	; 255
    1118:	16 c0       	rjmp	.+44     	; 0x1146 <__floatsisf+0x6c>
    111a:	88 23       	and	r24, r24
    111c:	11 f0       	breq	.+4      	; 0x1122 <__floatsisf+0x48>
    111e:	96 e9       	ldi	r25, 0x96	; 150
    1120:	11 c0       	rjmp	.+34     	; 0x1144 <__floatsisf+0x6a>
    1122:	77 23       	and	r23, r23
    1124:	21 f0       	breq	.+8      	; 0x112e <__floatsisf+0x54>
    1126:	9e e8       	ldi	r25, 0x8E	; 142
    1128:	87 2f       	mov	r24, r23
    112a:	76 2f       	mov	r23, r22
    112c:	05 c0       	rjmp	.+10     	; 0x1138 <__floatsisf+0x5e>
    112e:	66 23       	and	r22, r22
    1130:	71 f0       	breq	.+28     	; 0x114e <__floatsisf+0x74>
    1132:	96 e8       	ldi	r25, 0x86	; 134
    1134:	86 2f       	mov	r24, r22
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	2a f0       	brmi	.+10     	; 0x1146 <__floatsisf+0x6c>
    113c:	9a 95       	dec	r25
    113e:	66 0f       	add	r22, r22
    1140:	77 1f       	adc	r23, r23
    1142:	88 1f       	adc	r24, r24
    1144:	da f7       	brpl	.-10     	; 0x113c <__floatsisf+0x62>
    1146:	88 0f       	add	r24, r24
    1148:	96 95       	lsr	r25
    114a:	87 95       	ror	r24
    114c:	97 f9       	bld	r25, 7
    114e:	08 95       	ret

00001150 <__fp_inf>:
    1150:	97 f9       	bld	r25, 7
    1152:	9f 67       	ori	r25, 0x7F	; 127
    1154:	80 e8       	ldi	r24, 0x80	; 128
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	08 95       	ret

0000115c <__fp_mintl>:
    115c:	88 23       	and	r24, r24
    115e:	71 f4       	brne	.+28     	; 0x117c <__fp_mintl+0x20>
    1160:	77 23       	and	r23, r23
    1162:	21 f0       	breq	.+8      	; 0x116c <__fp_mintl+0x10>
    1164:	98 50       	subi	r25, 0x08	; 8
    1166:	87 2b       	or	r24, r23
    1168:	76 2f       	mov	r23, r22
    116a:	07 c0       	rjmp	.+14     	; 0x117a <__fp_mintl+0x1e>
    116c:	66 23       	and	r22, r22
    116e:	11 f4       	brne	.+4      	; 0x1174 <__fp_mintl+0x18>
    1170:	99 27       	eor	r25, r25
    1172:	0d c0       	rjmp	.+26     	; 0x118e <__fp_mintl+0x32>
    1174:	90 51       	subi	r25, 0x10	; 16
    1176:	86 2b       	or	r24, r22
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	2a f0       	brmi	.+10     	; 0x1188 <__fp_mintl+0x2c>
    117e:	9a 95       	dec	r25
    1180:	66 0f       	add	r22, r22
    1182:	77 1f       	adc	r23, r23
    1184:	88 1f       	adc	r24, r24
    1186:	da f7       	brpl	.-10     	; 0x117e <__fp_mintl+0x22>
    1188:	88 0f       	add	r24, r24
    118a:	96 95       	lsr	r25
    118c:	87 95       	ror	r24
    118e:	97 f9       	bld	r25, 7
    1190:	08 95       	ret

00001192 <__fp_mpack>:
    1192:	9f 3f       	cpi	r25, 0xFF	; 255
    1194:	31 f0       	breq	.+12     	; 0x11a2 <__fp_mpack_finite+0xc>

00001196 <__fp_mpack_finite>:
    1196:	91 50       	subi	r25, 0x01	; 1
    1198:	20 f4       	brcc	.+8      	; 0x11a2 <__fp_mpack_finite+0xc>
    119a:	87 95       	ror	r24
    119c:	77 95       	ror	r23
    119e:	67 95       	ror	r22
    11a0:	b7 95       	ror	r27
    11a2:	88 0f       	add	r24, r24
    11a4:	91 1d       	adc	r25, r1
    11a6:	96 95       	lsr	r25
    11a8:	87 95       	ror	r24
    11aa:	97 f9       	bld	r25, 7
    11ac:	08 95       	ret

000011ae <__fp_nan>:
    11ae:	9f ef       	ldi	r25, 0xFF	; 255
    11b0:	80 ec       	ldi	r24, 0xC0	; 192
    11b2:	08 95       	ret

000011b4 <__fp_pscA>:
    11b4:	00 24       	eor	r0, r0
    11b6:	0a 94       	dec	r0
    11b8:	16 16       	cp	r1, r22
    11ba:	17 06       	cpc	r1, r23
    11bc:	18 06       	cpc	r1, r24
    11be:	09 06       	cpc	r0, r25
    11c0:	08 95       	ret

000011c2 <__fp_pscB>:
    11c2:	00 24       	eor	r0, r0
    11c4:	0a 94       	dec	r0
    11c6:	12 16       	cp	r1, r18
    11c8:	13 06       	cpc	r1, r19
    11ca:	14 06       	cpc	r1, r20
    11cc:	05 06       	cpc	r0, r21
    11ce:	08 95       	ret
    11d0:	ee cf       	rjmp	.-36     	; 0x11ae <__fp_nan>

000011d2 <__fp_rempio2>:
    11d2:	50 d0       	rcall	.+160    	; 0x1274 <__fp_splitA>
    11d4:	e8 f3       	brcs	.-6      	; 0x11d0 <__fp_pscB+0xe>
    11d6:	e8 94       	clt
    11d8:	e0 e0       	ldi	r30, 0x00	; 0
    11da:	bb 27       	eor	r27, r27
    11dc:	9f 57       	subi	r25, 0x7F	; 127
    11de:	f0 f0       	brcs	.+60     	; 0x121c <__fp_rempio2+0x4a>
    11e0:	2a ed       	ldi	r18, 0xDA	; 218
    11e2:	3f e0       	ldi	r19, 0x0F	; 15
    11e4:	49 ec       	ldi	r20, 0xC9	; 201
    11e6:	06 c0       	rjmp	.+12     	; 0x11f4 <__fp_rempio2+0x22>
    11e8:	ee 0f       	add	r30, r30
    11ea:	bb 0f       	add	r27, r27
    11ec:	66 1f       	adc	r22, r22
    11ee:	77 1f       	adc	r23, r23
    11f0:	88 1f       	adc	r24, r24
    11f2:	28 f0       	brcs	.+10     	; 0x11fe <__fp_rempio2+0x2c>
    11f4:	b2 3a       	cpi	r27, 0xA2	; 162
    11f6:	62 07       	cpc	r22, r18
    11f8:	73 07       	cpc	r23, r19
    11fa:	84 07       	cpc	r24, r20
    11fc:	28 f0       	brcs	.+10     	; 0x1208 <__fp_rempio2+0x36>
    11fe:	b2 5a       	subi	r27, 0xA2	; 162
    1200:	62 0b       	sbc	r22, r18
    1202:	73 0b       	sbc	r23, r19
    1204:	84 0b       	sbc	r24, r20
    1206:	e3 95       	inc	r30
    1208:	9a 95       	dec	r25
    120a:	72 f7       	brpl	.-36     	; 0x11e8 <__fp_rempio2+0x16>
    120c:	80 38       	cpi	r24, 0x80	; 128
    120e:	30 f4       	brcc	.+12     	; 0x121c <__fp_rempio2+0x4a>
    1210:	9a 95       	dec	r25
    1212:	bb 0f       	add	r27, r27
    1214:	66 1f       	adc	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	88 1f       	adc	r24, r24
    121a:	d2 f7       	brpl	.-12     	; 0x1210 <__fp_rempio2+0x3e>
    121c:	90 48       	sbci	r25, 0x80	; 128
    121e:	bb cf       	rjmp	.-138    	; 0x1196 <__fp_mpack_finite>

00001220 <__fp_round>:
    1220:	09 2e       	mov	r0, r25
    1222:	03 94       	inc	r0
    1224:	00 0c       	add	r0, r0
    1226:	11 f4       	brne	.+4      	; 0x122c <__fp_round+0xc>
    1228:	88 23       	and	r24, r24
    122a:	52 f0       	brmi	.+20     	; 0x1240 <__fp_round+0x20>
    122c:	bb 0f       	add	r27, r27
    122e:	40 f4       	brcc	.+16     	; 0x1240 <__fp_round+0x20>
    1230:	bf 2b       	or	r27, r31
    1232:	11 f4       	brne	.+4      	; 0x1238 <__fp_round+0x18>
    1234:	60 ff       	sbrs	r22, 0
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <__fp_round+0x20>
    1238:	6f 5f       	subi	r22, 0xFF	; 255
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	8f 4f       	sbci	r24, 0xFF	; 255
    123e:	9f 4f       	sbci	r25, 0xFF	; 255
    1240:	08 95       	ret

00001242 <__fp_sinus>:
    1242:	ef 93       	push	r30
    1244:	e0 ff       	sbrs	r30, 0
    1246:	06 c0       	rjmp	.+12     	; 0x1254 <__fp_sinus+0x12>
    1248:	a2 ea       	ldi	r26, 0xA2	; 162
    124a:	2a ed       	ldi	r18, 0xDA	; 218
    124c:	3f e0       	ldi	r19, 0x0F	; 15
    124e:	49 ec       	ldi	r20, 0xC9	; 201
    1250:	5f eb       	ldi	r21, 0xBF	; 191
    1252:	3f de       	rcall	.-898    	; 0xed2 <__addsf3x>
    1254:	e5 df       	rcall	.-54     	; 0x1220 <__fp_round>
    1256:	0f 90       	pop	r0
    1258:	03 94       	inc	r0
    125a:	01 fc       	sbrc	r0, 1
    125c:	90 58       	subi	r25, 0x80	; 128
    125e:	e4 e5       	ldi	r30, 0x54	; 84
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	c3 c0       	rjmp	.+390    	; 0x13ea <__fp_powsodd>

00001264 <__fp_split3>:
    1264:	57 fd       	sbrc	r21, 7
    1266:	90 58       	subi	r25, 0x80	; 128
    1268:	44 0f       	add	r20, r20
    126a:	55 1f       	adc	r21, r21
    126c:	59 f0       	breq	.+22     	; 0x1284 <__fp_splitA+0x10>
    126e:	5f 3f       	cpi	r21, 0xFF	; 255
    1270:	71 f0       	breq	.+28     	; 0x128e <__fp_splitA+0x1a>
    1272:	47 95       	ror	r20

00001274 <__fp_splitA>:
    1274:	88 0f       	add	r24, r24
    1276:	97 fb       	bst	r25, 7
    1278:	99 1f       	adc	r25, r25
    127a:	61 f0       	breq	.+24     	; 0x1294 <__fp_splitA+0x20>
    127c:	9f 3f       	cpi	r25, 0xFF	; 255
    127e:	79 f0       	breq	.+30     	; 0x129e <__fp_splitA+0x2a>
    1280:	87 95       	ror	r24
    1282:	08 95       	ret
    1284:	12 16       	cp	r1, r18
    1286:	13 06       	cpc	r1, r19
    1288:	14 06       	cpc	r1, r20
    128a:	55 1f       	adc	r21, r21
    128c:	f2 cf       	rjmp	.-28     	; 0x1272 <__fp_split3+0xe>
    128e:	46 95       	lsr	r20
    1290:	f1 df       	rcall	.-30     	; 0x1274 <__fp_splitA>
    1292:	08 c0       	rjmp	.+16     	; 0x12a4 <__fp_splitA+0x30>
    1294:	16 16       	cp	r1, r22
    1296:	17 06       	cpc	r1, r23
    1298:	18 06       	cpc	r1, r24
    129a:	99 1f       	adc	r25, r25
    129c:	f1 cf       	rjmp	.-30     	; 0x1280 <__fp_splitA+0xc>
    129e:	86 95       	lsr	r24
    12a0:	71 05       	cpc	r23, r1
    12a2:	61 05       	cpc	r22, r1
    12a4:	08 94       	sec
    12a6:	08 95       	ret

000012a8 <__fp_trunc>:
    12a8:	e5 df       	rcall	.-54     	; 0x1274 <__fp_splitA>
    12aa:	a0 f0       	brcs	.+40     	; 0x12d4 <__fp_trunc+0x2c>
    12ac:	be e7       	ldi	r27, 0x7E	; 126
    12ae:	b9 17       	cp	r27, r25
    12b0:	88 f4       	brcc	.+34     	; 0x12d4 <__fp_trunc+0x2c>
    12b2:	bb 27       	eor	r27, r27
    12b4:	9f 38       	cpi	r25, 0x8F	; 143
    12b6:	60 f4       	brcc	.+24     	; 0x12d0 <__fp_trunc+0x28>
    12b8:	16 16       	cp	r1, r22
    12ba:	b1 1d       	adc	r27, r1
    12bc:	67 2f       	mov	r22, r23
    12be:	78 2f       	mov	r23, r24
    12c0:	88 27       	eor	r24, r24
    12c2:	98 5f       	subi	r25, 0xF8	; 248
    12c4:	f7 cf       	rjmp	.-18     	; 0x12b4 <__fp_trunc+0xc>
    12c6:	86 95       	lsr	r24
    12c8:	77 95       	ror	r23
    12ca:	67 95       	ror	r22
    12cc:	b1 1d       	adc	r27, r1
    12ce:	93 95       	inc	r25
    12d0:	96 39       	cpi	r25, 0x96	; 150
    12d2:	c8 f3       	brcs	.-14     	; 0x12c6 <__fp_trunc+0x1e>
    12d4:	08 95       	ret

000012d6 <__fp_zero>:
    12d6:	e8 94       	clt

000012d8 <__fp_szero>:
    12d8:	bb 27       	eor	r27, r27
    12da:	66 27       	eor	r22, r22
    12dc:	77 27       	eor	r23, r23
    12de:	cb 01       	movw	r24, r22
    12e0:	97 f9       	bld	r25, 7
    12e2:	08 95       	ret

000012e4 <__mulsf3>:
    12e4:	0b d0       	rcall	.+22     	; 0x12fc <__mulsf3x>
    12e6:	9c cf       	rjmp	.-200    	; 0x1220 <__fp_round>
    12e8:	65 df       	rcall	.-310    	; 0x11b4 <__fp_pscA>
    12ea:	28 f0       	brcs	.+10     	; 0x12f6 <__mulsf3+0x12>
    12ec:	6a df       	rcall	.-300    	; 0x11c2 <__fp_pscB>
    12ee:	18 f0       	brcs	.+6      	; 0x12f6 <__mulsf3+0x12>
    12f0:	95 23       	and	r25, r21
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <__mulsf3+0x12>
    12f4:	2d cf       	rjmp	.-422    	; 0x1150 <__fp_inf>
    12f6:	5b cf       	rjmp	.-330    	; 0x11ae <__fp_nan>
    12f8:	11 24       	eor	r1, r1
    12fa:	ee cf       	rjmp	.-36     	; 0x12d8 <__fp_szero>

000012fc <__mulsf3x>:
    12fc:	b3 df       	rcall	.-154    	; 0x1264 <__fp_split3>
    12fe:	a0 f3       	brcs	.-24     	; 0x12e8 <__mulsf3+0x4>

00001300 <__mulsf3_pse>:
    1300:	95 9f       	mul	r25, r21
    1302:	d1 f3       	breq	.-12     	; 0x12f8 <__mulsf3+0x14>
    1304:	95 0f       	add	r25, r21
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	55 1f       	adc	r21, r21
    130a:	62 9f       	mul	r22, r18
    130c:	f0 01       	movw	r30, r0
    130e:	72 9f       	mul	r23, r18
    1310:	bb 27       	eor	r27, r27
    1312:	f0 0d       	add	r31, r0
    1314:	b1 1d       	adc	r27, r1
    1316:	63 9f       	mul	r22, r19
    1318:	aa 27       	eor	r26, r26
    131a:	f0 0d       	add	r31, r0
    131c:	b1 1d       	adc	r27, r1
    131e:	aa 1f       	adc	r26, r26
    1320:	64 9f       	mul	r22, r20
    1322:	66 27       	eor	r22, r22
    1324:	b0 0d       	add	r27, r0
    1326:	a1 1d       	adc	r26, r1
    1328:	66 1f       	adc	r22, r22
    132a:	82 9f       	mul	r24, r18
    132c:	22 27       	eor	r18, r18
    132e:	b0 0d       	add	r27, r0
    1330:	a1 1d       	adc	r26, r1
    1332:	62 1f       	adc	r22, r18
    1334:	73 9f       	mul	r23, r19
    1336:	b0 0d       	add	r27, r0
    1338:	a1 1d       	adc	r26, r1
    133a:	62 1f       	adc	r22, r18
    133c:	83 9f       	mul	r24, r19
    133e:	a0 0d       	add	r26, r0
    1340:	61 1d       	adc	r22, r1
    1342:	22 1f       	adc	r18, r18
    1344:	74 9f       	mul	r23, r20
    1346:	33 27       	eor	r19, r19
    1348:	a0 0d       	add	r26, r0
    134a:	61 1d       	adc	r22, r1
    134c:	23 1f       	adc	r18, r19
    134e:	84 9f       	mul	r24, r20
    1350:	60 0d       	add	r22, r0
    1352:	21 1d       	adc	r18, r1
    1354:	82 2f       	mov	r24, r18
    1356:	76 2f       	mov	r23, r22
    1358:	6a 2f       	mov	r22, r26
    135a:	11 24       	eor	r1, r1
    135c:	9f 57       	subi	r25, 0x7F	; 127
    135e:	50 40       	sbci	r21, 0x00	; 0
    1360:	8a f0       	brmi	.+34     	; 0x1384 <__mulsf3_pse+0x84>
    1362:	e1 f0       	breq	.+56     	; 0x139c <__mulsf3_pse+0x9c>
    1364:	88 23       	and	r24, r24
    1366:	4a f0       	brmi	.+18     	; 0x137a <__mulsf3_pse+0x7a>
    1368:	ee 0f       	add	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	bb 1f       	adc	r27, r27
    136e:	66 1f       	adc	r22, r22
    1370:	77 1f       	adc	r23, r23
    1372:	88 1f       	adc	r24, r24
    1374:	91 50       	subi	r25, 0x01	; 1
    1376:	50 40       	sbci	r21, 0x00	; 0
    1378:	a9 f7       	brne	.-22     	; 0x1364 <__mulsf3_pse+0x64>
    137a:	9e 3f       	cpi	r25, 0xFE	; 254
    137c:	51 05       	cpc	r21, r1
    137e:	70 f0       	brcs	.+28     	; 0x139c <__mulsf3_pse+0x9c>
    1380:	e7 ce       	rjmp	.-562    	; 0x1150 <__fp_inf>
    1382:	aa cf       	rjmp	.-172    	; 0x12d8 <__fp_szero>
    1384:	5f 3f       	cpi	r21, 0xFF	; 255
    1386:	ec f3       	brlt	.-6      	; 0x1382 <__mulsf3_pse+0x82>
    1388:	98 3e       	cpi	r25, 0xE8	; 232
    138a:	dc f3       	brlt	.-10     	; 0x1382 <__mulsf3_pse+0x82>
    138c:	86 95       	lsr	r24
    138e:	77 95       	ror	r23
    1390:	67 95       	ror	r22
    1392:	b7 95       	ror	r27
    1394:	f7 95       	ror	r31
    1396:	e7 95       	ror	r30
    1398:	9f 5f       	subi	r25, 0xFF	; 255
    139a:	c1 f7       	brne	.-16     	; 0x138c <__mulsf3_pse+0x8c>
    139c:	fe 2b       	or	r31, r30
    139e:	88 0f       	add	r24, r24
    13a0:	91 1d       	adc	r25, r1
    13a2:	96 95       	lsr	r25
    13a4:	87 95       	ror	r24
    13a6:	97 f9       	bld	r25, 7
    13a8:	08 95       	ret

000013aa <round>:
    13aa:	64 df       	rcall	.-312    	; 0x1274 <__fp_splitA>
    13ac:	e0 f0       	brcs	.+56     	; 0x13e6 <round+0x3c>
    13ae:	9e 37       	cpi	r25, 0x7E	; 126
    13b0:	d8 f0       	brcs	.+54     	; 0x13e8 <round+0x3e>
    13b2:	96 39       	cpi	r25, 0x96	; 150
    13b4:	b8 f4       	brcc	.+46     	; 0x13e4 <round+0x3a>
    13b6:	9e 38       	cpi	r25, 0x8E	; 142
    13b8:	48 f4       	brcc	.+18     	; 0x13cc <round+0x22>
    13ba:	67 2f       	mov	r22, r23
    13bc:	78 2f       	mov	r23, r24
    13be:	88 27       	eor	r24, r24
    13c0:	98 5f       	subi	r25, 0xF8	; 248
    13c2:	f9 cf       	rjmp	.-14     	; 0x13b6 <round+0xc>
    13c4:	86 95       	lsr	r24
    13c6:	77 95       	ror	r23
    13c8:	67 95       	ror	r22
    13ca:	93 95       	inc	r25
    13cc:	95 39       	cpi	r25, 0x95	; 149
    13ce:	d0 f3       	brcs	.-12     	; 0x13c4 <round+0x1a>
    13d0:	b6 2f       	mov	r27, r22
    13d2:	b1 70       	andi	r27, 0x01	; 1
    13d4:	6b 0f       	add	r22, r27
    13d6:	71 1d       	adc	r23, r1
    13d8:	81 1d       	adc	r24, r1
    13da:	20 f4       	brcc	.+8      	; 0x13e4 <round+0x3a>
    13dc:	87 95       	ror	r24
    13de:	77 95       	ror	r23
    13e0:	67 95       	ror	r22
    13e2:	93 95       	inc	r25
    13e4:	bb ce       	rjmp	.-650    	; 0x115c <__fp_mintl>
    13e6:	d5 ce       	rjmp	.-598    	; 0x1192 <__fp_mpack>
    13e8:	77 cf       	rjmp	.-274    	; 0x12d8 <__fp_szero>

000013ea <__fp_powsodd>:
    13ea:	9f 93       	push	r25
    13ec:	8f 93       	push	r24
    13ee:	7f 93       	push	r23
    13f0:	6f 93       	push	r22
    13f2:	ff 93       	push	r31
    13f4:	ef 93       	push	r30
    13f6:	9b 01       	movw	r18, r22
    13f8:	ac 01       	movw	r20, r24
    13fa:	74 df       	rcall	.-280    	; 0x12e4 <__mulsf3>
    13fc:	ef 91       	pop	r30
    13fe:	ff 91       	pop	r31
    1400:	05 d0       	rcall	.+10     	; 0x140c <__fp_powser>
    1402:	2f 91       	pop	r18
    1404:	3f 91       	pop	r19
    1406:	4f 91       	pop	r20
    1408:	5f 91       	pop	r21
    140a:	6c cf       	rjmp	.-296    	; 0x12e4 <__mulsf3>

0000140c <__fp_powser>:
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	1f 93       	push	r17
    1412:	0f 93       	push	r16
    1414:	ff 92       	push	r15
    1416:	ef 92       	push	r14
    1418:	df 92       	push	r13
    141a:	7b 01       	movw	r14, r22
    141c:	8c 01       	movw	r16, r24
    141e:	68 94       	set
    1420:	05 c0       	rjmp	.+10     	; 0x142c <__fp_powser+0x20>
    1422:	da 2e       	mov	r13, r26
    1424:	ef 01       	movw	r28, r30
    1426:	6a df       	rcall	.-300    	; 0x12fc <__mulsf3x>
    1428:	fe 01       	movw	r30, r28
    142a:	e8 94       	clt
    142c:	a5 91       	lpm	r26, Z+
    142e:	25 91       	lpm	r18, Z+
    1430:	35 91       	lpm	r19, Z+
    1432:	45 91       	lpm	r20, Z+
    1434:	55 91       	lpm	r21, Z+
    1436:	ae f3       	brts	.-22     	; 0x1422 <__fp_powser+0x16>
    1438:	ef 01       	movw	r28, r30
    143a:	4b dd       	rcall	.-1386   	; 0xed2 <__addsf3x>
    143c:	fe 01       	movw	r30, r28
    143e:	97 01       	movw	r18, r14
    1440:	a8 01       	movw	r20, r16
    1442:	da 94       	dec	r13
    1444:	79 f7       	brne	.-34     	; 0x1424 <__fp_powser+0x18>
    1446:	df 90       	pop	r13
    1448:	ef 90       	pop	r14
    144a:	ff 90       	pop	r15
    144c:	0f 91       	pop	r16
    144e:	1f 91       	pop	r17
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <__divmodhi4>:
    1456:	97 fb       	bst	r25, 7
    1458:	09 2e       	mov	r0, r25
    145a:	07 26       	eor	r0, r23
    145c:	0a d0       	rcall	.+20     	; 0x1472 <__divmodhi4_neg1>
    145e:	77 fd       	sbrc	r23, 7
    1460:	04 d0       	rcall	.+8      	; 0x146a <__divmodhi4_neg2>
    1462:	0c d0       	rcall	.+24     	; 0x147c <__udivmodhi4>
    1464:	06 d0       	rcall	.+12     	; 0x1472 <__divmodhi4_neg1>
    1466:	00 20       	and	r0, r0
    1468:	1a f4       	brpl	.+6      	; 0x1470 <__divmodhi4_exit>

0000146a <__divmodhi4_neg2>:
    146a:	70 95       	com	r23
    146c:	61 95       	neg	r22
    146e:	7f 4f       	sbci	r23, 0xFF	; 255

00001470 <__divmodhi4_exit>:
    1470:	08 95       	ret

00001472 <__divmodhi4_neg1>:
    1472:	f6 f7       	brtc	.-4      	; 0x1470 <__divmodhi4_exit>
    1474:	90 95       	com	r25
    1476:	81 95       	neg	r24
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	08 95       	ret

0000147c <__udivmodhi4>:
    147c:	aa 1b       	sub	r26, r26
    147e:	bb 1b       	sub	r27, r27
    1480:	51 e1       	ldi	r21, 0x11	; 17
    1482:	07 c0       	rjmp	.+14     	; 0x1492 <__udivmodhi4_ep>

00001484 <__udivmodhi4_loop>:
    1484:	aa 1f       	adc	r26, r26
    1486:	bb 1f       	adc	r27, r27
    1488:	a6 17       	cp	r26, r22
    148a:	b7 07       	cpc	r27, r23
    148c:	10 f0       	brcs	.+4      	; 0x1492 <__udivmodhi4_ep>
    148e:	a6 1b       	sub	r26, r22
    1490:	b7 0b       	sbc	r27, r23

00001492 <__udivmodhi4_ep>:
    1492:	88 1f       	adc	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	5a 95       	dec	r21
    1498:	a9 f7       	brne	.-22     	; 0x1484 <__udivmodhi4_loop>
    149a:	80 95       	com	r24
    149c:	90 95       	com	r25
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	08 95       	ret

000014a4 <memcpy>:
    14a4:	fb 01       	movw	r30, r22
    14a6:	dc 01       	movw	r26, r24
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <memcpy+0xa>
    14aa:	01 90       	ld	r0, Z+
    14ac:	0d 92       	st	X+, r0
    14ae:	41 50       	subi	r20, 0x01	; 1
    14b0:	50 40       	sbci	r21, 0x00	; 0
    14b2:	d8 f7       	brcc	.-10     	; 0x14aa <memcpy+0x6>
    14b4:	08 95       	ret

000014b6 <memmove>:
    14b6:	68 17       	cp	r22, r24
    14b8:	79 07       	cpc	r23, r25
    14ba:	68 f4       	brcc	.+26     	; 0x14d6 <memmove+0x20>
    14bc:	fb 01       	movw	r30, r22
    14be:	dc 01       	movw	r26, r24
    14c0:	e4 0f       	add	r30, r20
    14c2:	f5 1f       	adc	r31, r21
    14c4:	a4 0f       	add	r26, r20
    14c6:	b5 1f       	adc	r27, r21
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <memmove+0x18>
    14ca:	02 90       	ld	r0, -Z
    14cc:	0e 92       	st	-X, r0
    14ce:	41 50       	subi	r20, 0x01	; 1
    14d0:	50 40       	sbci	r21, 0x00	; 0
    14d2:	d8 f7       	brcc	.-10     	; 0x14ca <memmove+0x14>
    14d4:	08 95       	ret
    14d6:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <memcpy>

000014da <memset>:
    14da:	dc 01       	movw	r26, r24
    14dc:	01 c0       	rjmp	.+2      	; 0x14e0 <memset+0x6>
    14de:	6d 93       	st	X+, r22
    14e0:	41 50       	subi	r20, 0x01	; 1
    14e2:	50 40       	sbci	r21, 0x00	; 0
    14e4:	e0 f7       	brcc	.-8      	; 0x14de <memset+0x4>
    14e6:	08 95       	ret

000014e8 <strncmp>:
    14e8:	fb 01       	movw	r30, r22
    14ea:	dc 01       	movw	r26, r24
    14ec:	41 50       	subi	r20, 0x01	; 1
    14ee:	50 40       	sbci	r21, 0x00	; 0
    14f0:	30 f0       	brcs	.+12     	; 0x14fe <strncmp+0x16>
    14f2:	8d 91       	ld	r24, X+
    14f4:	01 90       	ld	r0, Z+
    14f6:	80 19       	sub	r24, r0
    14f8:	19 f4       	brne	.+6      	; 0x1500 <strncmp+0x18>
    14fa:	00 20       	and	r0, r0
    14fc:	b9 f7       	brne	.-18     	; 0x14ec <strncmp+0x4>
    14fe:	88 1b       	sub	r24, r24
    1500:	99 0b       	sbc	r25, r25
    1502:	08 95       	ret

00001504 <strncpy>:
    1504:	fb 01       	movw	r30, r22
    1506:	dc 01       	movw	r26, r24
    1508:	41 50       	subi	r20, 0x01	; 1
    150a:	50 40       	sbci	r21, 0x00	; 0
    150c:	48 f0       	brcs	.+18     	; 0x1520 <strncpy+0x1c>
    150e:	01 90       	ld	r0, Z+
    1510:	0d 92       	st	X+, r0
    1512:	00 20       	and	r0, r0
    1514:	c9 f7       	brne	.-14     	; 0x1508 <strncpy+0x4>
    1516:	01 c0       	rjmp	.+2      	; 0x151a <strncpy+0x16>
    1518:	1d 92       	st	X+, r1
    151a:	41 50       	subi	r20, 0x01	; 1
    151c:	50 40       	sbci	r21, 0x00	; 0
    151e:	e0 f7       	brcc	.-8      	; 0x1518 <strncpy+0x14>
    1520:	08 95       	ret

00001522 <strstr>:
    1522:	fb 01       	movw	r30, r22
    1524:	51 91       	ld	r21, Z+
    1526:	55 23       	and	r21, r21
    1528:	a9 f0       	breq	.+42     	; 0x1554 <strstr+0x32>
    152a:	bf 01       	movw	r22, r30
    152c:	dc 01       	movw	r26, r24
    152e:	4d 91       	ld	r20, X+
    1530:	45 17       	cp	r20, r21
    1532:	41 11       	cpse	r20, r1
    1534:	e1 f7       	brne	.-8      	; 0x152e <strstr+0xc>
    1536:	59 f4       	brne	.+22     	; 0x154e <strstr+0x2c>
    1538:	cd 01       	movw	r24, r26
    153a:	01 90       	ld	r0, Z+
    153c:	00 20       	and	r0, r0
    153e:	49 f0       	breq	.+18     	; 0x1552 <strstr+0x30>
    1540:	4d 91       	ld	r20, X+
    1542:	40 15       	cp	r20, r0
    1544:	41 11       	cpse	r20, r1
    1546:	c9 f3       	breq	.-14     	; 0x153a <strstr+0x18>
    1548:	fb 01       	movw	r30, r22
    154a:	41 11       	cpse	r20, r1
    154c:	ef cf       	rjmp	.-34     	; 0x152c <strstr+0xa>
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	08 95       	ret

00001556 <itoa>:
    1556:	fb 01       	movw	r30, r22
    1558:	9f 01       	movw	r18, r30
    155a:	e8 94       	clt
    155c:	42 30       	cpi	r20, 0x02	; 2
    155e:	c4 f0       	brlt	.+48     	; 0x1590 <itoa+0x3a>
    1560:	45 32       	cpi	r20, 0x25	; 37
    1562:	b4 f4       	brge	.+44     	; 0x1590 <itoa+0x3a>
    1564:	4a 30       	cpi	r20, 0x0A	; 10
    1566:	29 f4       	brne	.+10     	; 0x1572 <itoa+0x1c>
    1568:	97 fb       	bst	r25, 7
    156a:	1e f4       	brtc	.+6      	; 0x1572 <itoa+0x1c>
    156c:	90 95       	com	r25
    156e:	81 95       	neg	r24
    1570:	9f 4f       	sbci	r25, 0xFF	; 255
    1572:	64 2f       	mov	r22, r20
    1574:	77 27       	eor	r23, r23
    1576:	0e 94 3e 0a 	call	0x147c	; 0x147c <__udivmodhi4>
    157a:	80 5d       	subi	r24, 0xD0	; 208
    157c:	8a 33       	cpi	r24, 0x3A	; 58
    157e:	0c f0       	brlt	.+2      	; 0x1582 <itoa+0x2c>
    1580:	89 5d       	subi	r24, 0xD9	; 217
    1582:	81 93       	st	Z+, r24
    1584:	cb 01       	movw	r24, r22
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	a1 f7       	brne	.-24     	; 0x1572 <itoa+0x1c>
    158a:	16 f4       	brtc	.+4      	; 0x1590 <itoa+0x3a>
    158c:	5d e2       	ldi	r21, 0x2D	; 45
    158e:	51 93       	st	Z+, r21
    1590:	10 82       	st	Z, r1
    1592:	c9 01       	movw	r24, r18
    1594:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <strrev>

00001598 <sprintf>:
    1598:	ae e0       	ldi	r26, 0x0E	; 14
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e2 ed       	ldi	r30, 0xD2	; 210
    159e:	fa e0       	ldi	r31, 0x0A	; 10
    15a0:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__prologue_saves__+0x1c>
    15a4:	0d 89       	ldd	r16, Y+21	; 0x15
    15a6:	1e 89       	ldd	r17, Y+22	; 0x16
    15a8:	86 e0       	ldi	r24, 0x06	; 6
    15aa:	8c 83       	std	Y+4, r24	; 0x04
    15ac:	1a 83       	std	Y+2, r17	; 0x02
    15ae:	09 83       	std	Y+1, r16	; 0x01
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
    15b2:	9f e7       	ldi	r25, 0x7F	; 127
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
    15b8:	ae 01       	movw	r20, r28
    15ba:	47 5e       	subi	r20, 0xE7	; 231
    15bc:	5f 4f       	sbci	r21, 0xFF	; 255
    15be:	ce 01       	movw	r24, r28
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	6f 89       	ldd	r22, Y+23	; 0x17
    15c4:	78 8d       	ldd	r23, Y+24	; 0x18
    15c6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <vfprintf>
    15ca:	ef 81       	ldd	r30, Y+7	; 0x07
    15cc:	f8 85       	ldd	r31, Y+8	; 0x08
    15ce:	e0 0f       	add	r30, r16
    15d0:	f1 1f       	adc	r31, r17
    15d2:	10 82       	st	Z, r1
    15d4:	2e 96       	adiw	r28, 0x0e	; 14
    15d6:	e4 e0       	ldi	r30, 0x04	; 4
    15d8:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__epilogue_restores__+0x1c>

000015dc <vfprintf>:
    15dc:	ad e0       	ldi	r26, 0x0D	; 13
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e4 ef       	ldi	r30, 0xF4	; 244
    15e2:	fa e0       	ldi	r31, 0x0A	; 10
    15e4:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__prologue_saves__>
    15e8:	3c 01       	movw	r6, r24
    15ea:	7d 87       	std	Y+13, r23	; 0x0d
    15ec:	6c 87       	std	Y+12, r22	; 0x0c
    15ee:	5a 01       	movw	r10, r20
    15f0:	fc 01       	movw	r30, r24
    15f2:	17 82       	std	Z+7, r1	; 0x07
    15f4:	16 82       	std	Z+6, r1	; 0x06
    15f6:	83 81       	ldd	r24, Z+3	; 0x03
    15f8:	81 ff       	sbrs	r24, 1
    15fa:	c8 c1       	rjmp	.+912    	; 0x198c <vfprintf+0x3b0>
    15fc:	2e 01       	movw	r4, r28
    15fe:	08 94       	sec
    1600:	41 1c       	adc	r4, r1
    1602:	51 1c       	adc	r5, r1
    1604:	f3 01       	movw	r30, r6
    1606:	93 81       	ldd	r25, Z+3	; 0x03
    1608:	ec 85       	ldd	r30, Y+12	; 0x0c
    160a:	fd 85       	ldd	r31, Y+13	; 0x0d
    160c:	93 fd       	sbrc	r25, 3
    160e:	85 91       	lpm	r24, Z+
    1610:	93 ff       	sbrs	r25, 3
    1612:	81 91       	ld	r24, Z+
    1614:	fd 87       	std	Y+13, r31	; 0x0d
    1616:	ec 87       	std	Y+12, r30	; 0x0c
    1618:	88 23       	and	r24, r24
    161a:	09 f4       	brne	.+2      	; 0x161e <vfprintf+0x42>
    161c:	b3 c1       	rjmp	.+870    	; 0x1984 <vfprintf+0x3a8>
    161e:	85 32       	cpi	r24, 0x25	; 37
    1620:	41 f4       	brne	.+16     	; 0x1632 <vfprintf+0x56>
    1622:	93 fd       	sbrc	r25, 3
    1624:	85 91       	lpm	r24, Z+
    1626:	93 ff       	sbrs	r25, 3
    1628:	81 91       	ld	r24, Z+
    162a:	fd 87       	std	Y+13, r31	; 0x0d
    162c:	ec 87       	std	Y+12, r30	; 0x0c
    162e:	85 32       	cpi	r24, 0x25	; 37
    1630:	29 f4       	brne	.+10     	; 0x163c <vfprintf+0x60>
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	b3 01       	movw	r22, r6
    1636:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <fputc>
    163a:	e4 cf       	rjmp	.-56     	; 0x1604 <vfprintf+0x28>
    163c:	ff 24       	eor	r15, r15
    163e:	ee 24       	eor	r14, r14
    1640:	10 e0       	ldi	r17, 0x00	; 0
    1642:	10 32       	cpi	r17, 0x20	; 32
    1644:	b0 f4       	brcc	.+44     	; 0x1672 <vfprintf+0x96>
    1646:	8b 32       	cpi	r24, 0x2B	; 43
    1648:	69 f0       	breq	.+26     	; 0x1664 <vfprintf+0x88>
    164a:	8c 32       	cpi	r24, 0x2C	; 44
    164c:	28 f4       	brcc	.+10     	; 0x1658 <vfprintf+0x7c>
    164e:	80 32       	cpi	r24, 0x20	; 32
    1650:	51 f0       	breq	.+20     	; 0x1666 <vfprintf+0x8a>
    1652:	83 32       	cpi	r24, 0x23	; 35
    1654:	71 f4       	brne	.+28     	; 0x1672 <vfprintf+0x96>
    1656:	0b c0       	rjmp	.+22     	; 0x166e <vfprintf+0x92>
    1658:	8d 32       	cpi	r24, 0x2D	; 45
    165a:	39 f0       	breq	.+14     	; 0x166a <vfprintf+0x8e>
    165c:	80 33       	cpi	r24, 0x30	; 48
    165e:	49 f4       	brne	.+18     	; 0x1672 <vfprintf+0x96>
    1660:	11 60       	ori	r17, 0x01	; 1
    1662:	2c c0       	rjmp	.+88     	; 0x16bc <vfprintf+0xe0>
    1664:	12 60       	ori	r17, 0x02	; 2
    1666:	14 60       	ori	r17, 0x04	; 4
    1668:	29 c0       	rjmp	.+82     	; 0x16bc <vfprintf+0xe0>
    166a:	18 60       	ori	r17, 0x08	; 8
    166c:	27 c0       	rjmp	.+78     	; 0x16bc <vfprintf+0xe0>
    166e:	10 61       	ori	r17, 0x10	; 16
    1670:	25 c0       	rjmp	.+74     	; 0x16bc <vfprintf+0xe0>
    1672:	17 fd       	sbrc	r17, 7
    1674:	2e c0       	rjmp	.+92     	; 0x16d2 <vfprintf+0xf6>
    1676:	28 2f       	mov	r18, r24
    1678:	20 53       	subi	r18, 0x30	; 48
    167a:	2a 30       	cpi	r18, 0x0A	; 10
    167c:	98 f4       	brcc	.+38     	; 0x16a4 <vfprintf+0xc8>
    167e:	16 ff       	sbrs	r17, 6
    1680:	08 c0       	rjmp	.+16     	; 0x1692 <vfprintf+0xb6>
    1682:	8f 2d       	mov	r24, r15
    1684:	88 0f       	add	r24, r24
    1686:	f8 2e       	mov	r15, r24
    1688:	ff 0c       	add	r15, r15
    168a:	ff 0c       	add	r15, r15
    168c:	f8 0e       	add	r15, r24
    168e:	f2 0e       	add	r15, r18
    1690:	15 c0       	rjmp	.+42     	; 0x16bc <vfprintf+0xe0>
    1692:	8e 2d       	mov	r24, r14
    1694:	88 0f       	add	r24, r24
    1696:	e8 2e       	mov	r14, r24
    1698:	ee 0c       	add	r14, r14
    169a:	ee 0c       	add	r14, r14
    169c:	e8 0e       	add	r14, r24
    169e:	e2 0e       	add	r14, r18
    16a0:	10 62       	ori	r17, 0x20	; 32
    16a2:	0c c0       	rjmp	.+24     	; 0x16bc <vfprintf+0xe0>
    16a4:	8e 32       	cpi	r24, 0x2E	; 46
    16a6:	21 f4       	brne	.+8      	; 0x16b0 <vfprintf+0xd4>
    16a8:	16 fd       	sbrc	r17, 6
    16aa:	6c c1       	rjmp	.+728    	; 0x1984 <vfprintf+0x3a8>
    16ac:	10 64       	ori	r17, 0x40	; 64
    16ae:	06 c0       	rjmp	.+12     	; 0x16bc <vfprintf+0xe0>
    16b0:	8c 36       	cpi	r24, 0x6C	; 108
    16b2:	11 f4       	brne	.+4      	; 0x16b8 <vfprintf+0xdc>
    16b4:	10 68       	ori	r17, 0x80	; 128
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <vfprintf+0xe0>
    16b8:	88 36       	cpi	r24, 0x68	; 104
    16ba:	59 f4       	brne	.+22     	; 0x16d2 <vfprintf+0xf6>
    16bc:	ec 85       	ldd	r30, Y+12	; 0x0c
    16be:	fd 85       	ldd	r31, Y+13	; 0x0d
    16c0:	93 fd       	sbrc	r25, 3
    16c2:	85 91       	lpm	r24, Z+
    16c4:	93 ff       	sbrs	r25, 3
    16c6:	81 91       	ld	r24, Z+
    16c8:	fd 87       	std	Y+13, r31	; 0x0d
    16ca:	ec 87       	std	Y+12, r30	; 0x0c
    16cc:	88 23       	and	r24, r24
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <vfprintf+0xf6>
    16d0:	b8 cf       	rjmp	.-144    	; 0x1642 <vfprintf+0x66>
    16d2:	98 2f       	mov	r25, r24
    16d4:	95 54       	subi	r25, 0x45	; 69
    16d6:	93 30       	cpi	r25, 0x03	; 3
    16d8:	18 f0       	brcs	.+6      	; 0x16e0 <vfprintf+0x104>
    16da:	90 52       	subi	r25, 0x20	; 32
    16dc:	93 30       	cpi	r25, 0x03	; 3
    16de:	38 f4       	brcc	.+14     	; 0x16ee <vfprintf+0x112>
    16e0:	24 e0       	ldi	r18, 0x04	; 4
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	a2 0e       	add	r10, r18
    16e6:	b3 1e       	adc	r11, r19
    16e8:	3f e3       	ldi	r19, 0x3F	; 63
    16ea:	39 83       	std	Y+1, r19	; 0x01
    16ec:	0f c0       	rjmp	.+30     	; 0x170c <vfprintf+0x130>
    16ee:	83 36       	cpi	r24, 0x63	; 99
    16f0:	31 f0       	breq	.+12     	; 0x16fe <vfprintf+0x122>
    16f2:	83 37       	cpi	r24, 0x73	; 115
    16f4:	81 f0       	breq	.+32     	; 0x1716 <vfprintf+0x13a>
    16f6:	83 35       	cpi	r24, 0x53	; 83
    16f8:	09 f0       	breq	.+2      	; 0x16fc <vfprintf+0x120>
    16fa:	5a c0       	rjmp	.+180    	; 0x17b0 <vfprintf+0x1d4>
    16fc:	22 c0       	rjmp	.+68     	; 0x1742 <vfprintf+0x166>
    16fe:	f5 01       	movw	r30, r10
    1700:	80 81       	ld	r24, Z
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	22 e0       	ldi	r18, 0x02	; 2
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	a2 0e       	add	r10, r18
    170a:	b3 1e       	adc	r11, r19
    170c:	21 e0       	ldi	r18, 0x01	; 1
    170e:	c2 2e       	mov	r12, r18
    1710:	d1 2c       	mov	r13, r1
    1712:	42 01       	movw	r8, r4
    1714:	14 c0       	rjmp	.+40     	; 0x173e <vfprintf+0x162>
    1716:	92 e0       	ldi	r25, 0x02	; 2
    1718:	29 2e       	mov	r2, r25
    171a:	31 2c       	mov	r3, r1
    171c:	2a 0c       	add	r2, r10
    171e:	3b 1c       	adc	r3, r11
    1720:	f5 01       	movw	r30, r10
    1722:	80 80       	ld	r8, Z
    1724:	91 80       	ldd	r9, Z+1	; 0x01
    1726:	16 ff       	sbrs	r17, 6
    1728:	03 c0       	rjmp	.+6      	; 0x1730 <vfprintf+0x154>
    172a:	6f 2d       	mov	r22, r15
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <vfprintf+0x158>
    1730:	6f ef       	ldi	r22, 0xFF	; 255
    1732:	7f ef       	ldi	r23, 0xFF	; 255
    1734:	c4 01       	movw	r24, r8
    1736:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <strnlen>
    173a:	6c 01       	movw	r12, r24
    173c:	51 01       	movw	r10, r2
    173e:	1f 77       	andi	r17, 0x7F	; 127
    1740:	15 c0       	rjmp	.+42     	; 0x176c <vfprintf+0x190>
    1742:	82 e0       	ldi	r24, 0x02	; 2
    1744:	28 2e       	mov	r2, r24
    1746:	31 2c       	mov	r3, r1
    1748:	2a 0c       	add	r2, r10
    174a:	3b 1c       	adc	r3, r11
    174c:	f5 01       	movw	r30, r10
    174e:	80 80       	ld	r8, Z
    1750:	91 80       	ldd	r9, Z+1	; 0x01
    1752:	16 ff       	sbrs	r17, 6
    1754:	03 c0       	rjmp	.+6      	; 0x175c <vfprintf+0x180>
    1756:	6f 2d       	mov	r22, r15
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x184>
    175c:	6f ef       	ldi	r22, 0xFF	; 255
    175e:	7f ef       	ldi	r23, 0xFF	; 255
    1760:	c4 01       	movw	r24, r8
    1762:	0e 94 cc 0c 	call	0x1998	; 0x1998 <strnlen_P>
    1766:	6c 01       	movw	r12, r24
    1768:	10 68       	ori	r17, 0x80	; 128
    176a:	51 01       	movw	r10, r2
    176c:	13 fd       	sbrc	r17, 3
    176e:	1c c0       	rjmp	.+56     	; 0x17a8 <vfprintf+0x1cc>
    1770:	06 c0       	rjmp	.+12     	; 0x177e <vfprintf+0x1a2>
    1772:	80 e2       	ldi	r24, 0x20	; 32
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	b3 01       	movw	r22, r6
    1778:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <fputc>
    177c:	ea 94       	dec	r14
    177e:	8e 2d       	mov	r24, r14
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	c8 16       	cp	r12, r24
    1784:	d9 06       	cpc	r13, r25
    1786:	a8 f3       	brcs	.-22     	; 0x1772 <vfprintf+0x196>
    1788:	0f c0       	rjmp	.+30     	; 0x17a8 <vfprintf+0x1cc>
    178a:	f4 01       	movw	r30, r8
    178c:	17 fd       	sbrc	r17, 7
    178e:	85 91       	lpm	r24, Z+
    1790:	17 ff       	sbrs	r17, 7
    1792:	81 91       	ld	r24, Z+
    1794:	4f 01       	movw	r8, r30
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	b3 01       	movw	r22, r6
    179a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <fputc>
    179e:	e1 10       	cpse	r14, r1
    17a0:	ea 94       	dec	r14
    17a2:	08 94       	sec
    17a4:	c1 08       	sbc	r12, r1
    17a6:	d1 08       	sbc	r13, r1
    17a8:	c1 14       	cp	r12, r1
    17aa:	d1 04       	cpc	r13, r1
    17ac:	71 f7       	brne	.-36     	; 0x178a <vfprintf+0x1ae>
    17ae:	e7 c0       	rjmp	.+462    	; 0x197e <vfprintf+0x3a2>
    17b0:	84 36       	cpi	r24, 0x64	; 100
    17b2:	11 f0       	breq	.+4      	; 0x17b8 <vfprintf+0x1dc>
    17b4:	89 36       	cpi	r24, 0x69	; 105
    17b6:	51 f5       	brne	.+84     	; 0x180c <vfprintf+0x230>
    17b8:	f5 01       	movw	r30, r10
    17ba:	17 ff       	sbrs	r17, 7
    17bc:	07 c0       	rjmp	.+14     	; 0x17cc <vfprintf+0x1f0>
    17be:	80 81       	ld	r24, Z
    17c0:	91 81       	ldd	r25, Z+1	; 0x01
    17c2:	a2 81       	ldd	r26, Z+2	; 0x02
    17c4:	b3 81       	ldd	r27, Z+3	; 0x03
    17c6:	24 e0       	ldi	r18, 0x04	; 4
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	08 c0       	rjmp	.+16     	; 0x17dc <vfprintf+0x200>
    17cc:	80 81       	ld	r24, Z
    17ce:	91 81       	ldd	r25, Z+1	; 0x01
    17d0:	aa 27       	eor	r26, r26
    17d2:	97 fd       	sbrc	r25, 7
    17d4:	a0 95       	com	r26
    17d6:	ba 2f       	mov	r27, r26
    17d8:	22 e0       	ldi	r18, 0x02	; 2
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	a2 0e       	add	r10, r18
    17de:	b3 1e       	adc	r11, r19
    17e0:	01 2f       	mov	r16, r17
    17e2:	0f 76       	andi	r16, 0x6F	; 111
    17e4:	b7 ff       	sbrs	r27, 7
    17e6:	08 c0       	rjmp	.+16     	; 0x17f8 <vfprintf+0x21c>
    17e8:	b0 95       	com	r27
    17ea:	a0 95       	com	r26
    17ec:	90 95       	com	r25
    17ee:	81 95       	neg	r24
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	af 4f       	sbci	r26, 0xFF	; 255
    17f4:	bf 4f       	sbci	r27, 0xFF	; 255
    17f6:	00 68       	ori	r16, 0x80	; 128
    17f8:	bc 01       	movw	r22, r24
    17fa:	cd 01       	movw	r24, r26
    17fc:	a2 01       	movw	r20, r4
    17fe:	2a e0       	ldi	r18, 0x0A	; 10
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__ultoa_invert>
    1806:	d8 2e       	mov	r13, r24
    1808:	d4 18       	sub	r13, r4
    180a:	3f c0       	rjmp	.+126    	; 0x188a <vfprintf+0x2ae>
    180c:	85 37       	cpi	r24, 0x75	; 117
    180e:	21 f4       	brne	.+8      	; 0x1818 <vfprintf+0x23c>
    1810:	1f 7e       	andi	r17, 0xEF	; 239
    1812:	2a e0       	ldi	r18, 0x0A	; 10
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	20 c0       	rjmp	.+64     	; 0x1858 <vfprintf+0x27c>
    1818:	19 7f       	andi	r17, 0xF9	; 249
    181a:	8f 36       	cpi	r24, 0x6F	; 111
    181c:	a9 f0       	breq	.+42     	; 0x1848 <vfprintf+0x26c>
    181e:	80 37       	cpi	r24, 0x70	; 112
    1820:	20 f4       	brcc	.+8      	; 0x182a <vfprintf+0x24e>
    1822:	88 35       	cpi	r24, 0x58	; 88
    1824:	09 f0       	breq	.+2      	; 0x1828 <vfprintf+0x24c>
    1826:	ae c0       	rjmp	.+348    	; 0x1984 <vfprintf+0x3a8>
    1828:	0b c0       	rjmp	.+22     	; 0x1840 <vfprintf+0x264>
    182a:	80 37       	cpi	r24, 0x70	; 112
    182c:	21 f0       	breq	.+8      	; 0x1836 <vfprintf+0x25a>
    182e:	88 37       	cpi	r24, 0x78	; 120
    1830:	09 f0       	breq	.+2      	; 0x1834 <vfprintf+0x258>
    1832:	a8 c0       	rjmp	.+336    	; 0x1984 <vfprintf+0x3a8>
    1834:	01 c0       	rjmp	.+2      	; 0x1838 <vfprintf+0x25c>
    1836:	10 61       	ori	r17, 0x10	; 16
    1838:	14 ff       	sbrs	r17, 4
    183a:	09 c0       	rjmp	.+18     	; 0x184e <vfprintf+0x272>
    183c:	14 60       	ori	r17, 0x04	; 4
    183e:	07 c0       	rjmp	.+14     	; 0x184e <vfprintf+0x272>
    1840:	14 ff       	sbrs	r17, 4
    1842:	08 c0       	rjmp	.+16     	; 0x1854 <vfprintf+0x278>
    1844:	16 60       	ori	r17, 0x06	; 6
    1846:	06 c0       	rjmp	.+12     	; 0x1854 <vfprintf+0x278>
    1848:	28 e0       	ldi	r18, 0x08	; 8
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <vfprintf+0x27c>
    184e:	20 e1       	ldi	r18, 0x10	; 16
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <vfprintf+0x27c>
    1854:	20 e1       	ldi	r18, 0x10	; 16
    1856:	32 e0       	ldi	r19, 0x02	; 2
    1858:	f5 01       	movw	r30, r10
    185a:	17 ff       	sbrs	r17, 7
    185c:	07 c0       	rjmp	.+14     	; 0x186c <vfprintf+0x290>
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	44 e0       	ldi	r20, 0x04	; 4
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <vfprintf+0x29c>
    186c:	60 81       	ld	r22, Z
    186e:	71 81       	ldd	r23, Z+1	; 0x01
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	42 e0       	ldi	r20, 0x02	; 2
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	a4 0e       	add	r10, r20
    187a:	b5 1e       	adc	r11, r21
    187c:	a2 01       	movw	r20, r4
    187e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__ultoa_invert>
    1882:	d8 2e       	mov	r13, r24
    1884:	d4 18       	sub	r13, r4
    1886:	01 2f       	mov	r16, r17
    1888:	0f 77       	andi	r16, 0x7F	; 127
    188a:	06 ff       	sbrs	r16, 6
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <vfprintf+0x2c4>
    188e:	0e 7f       	andi	r16, 0xFE	; 254
    1890:	df 14       	cp	r13, r15
    1892:	30 f4       	brcc	.+12     	; 0x18a0 <vfprintf+0x2c4>
    1894:	04 ff       	sbrs	r16, 4
    1896:	06 c0       	rjmp	.+12     	; 0x18a4 <vfprintf+0x2c8>
    1898:	02 fd       	sbrc	r16, 2
    189a:	04 c0       	rjmp	.+8      	; 0x18a4 <vfprintf+0x2c8>
    189c:	0f 7e       	andi	r16, 0xEF	; 239
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <vfprintf+0x2c8>
    18a0:	1d 2d       	mov	r17, r13
    18a2:	01 c0       	rjmp	.+2      	; 0x18a6 <vfprintf+0x2ca>
    18a4:	1f 2d       	mov	r17, r15
    18a6:	80 2f       	mov	r24, r16
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	04 ff       	sbrs	r16, 4
    18ac:	0c c0       	rjmp	.+24     	; 0x18c6 <vfprintf+0x2ea>
    18ae:	fe 01       	movw	r30, r28
    18b0:	ed 0d       	add	r30, r13
    18b2:	f1 1d       	adc	r31, r1
    18b4:	20 81       	ld	r18, Z
    18b6:	20 33       	cpi	r18, 0x30	; 48
    18b8:	11 f4       	brne	.+4      	; 0x18be <vfprintf+0x2e2>
    18ba:	09 7e       	andi	r16, 0xE9	; 233
    18bc:	09 c0       	rjmp	.+18     	; 0x18d0 <vfprintf+0x2f4>
    18be:	02 ff       	sbrs	r16, 2
    18c0:	06 c0       	rjmp	.+12     	; 0x18ce <vfprintf+0x2f2>
    18c2:	1e 5f       	subi	r17, 0xFE	; 254
    18c4:	05 c0       	rjmp	.+10     	; 0x18d0 <vfprintf+0x2f4>
    18c6:	86 78       	andi	r24, 0x86	; 134
    18c8:	90 70       	andi	r25, 0x00	; 0
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <vfprintf+0x2f4>
    18ce:	1f 5f       	subi	r17, 0xFF	; 255
    18d0:	80 2e       	mov	r8, r16
    18d2:	99 24       	eor	r9, r9
    18d4:	03 fd       	sbrc	r16, 3
    18d6:	12 c0       	rjmp	.+36     	; 0x18fc <vfprintf+0x320>
    18d8:	00 ff       	sbrs	r16, 0
    18da:	0d c0       	rjmp	.+26     	; 0x18f6 <vfprintf+0x31a>
    18dc:	fd 2c       	mov	r15, r13
    18de:	1e 15       	cp	r17, r14
    18e0:	50 f4       	brcc	.+20     	; 0x18f6 <vfprintf+0x31a>
    18e2:	fe 0c       	add	r15, r14
    18e4:	f1 1a       	sub	r15, r17
    18e6:	1e 2d       	mov	r17, r14
    18e8:	06 c0       	rjmp	.+12     	; 0x18f6 <vfprintf+0x31a>
    18ea:	80 e2       	ldi	r24, 0x20	; 32
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	b3 01       	movw	r22, r6
    18f0:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <fputc>
    18f4:	1f 5f       	subi	r17, 0xFF	; 255
    18f6:	1e 15       	cp	r17, r14
    18f8:	c0 f3       	brcs	.-16     	; 0x18ea <vfprintf+0x30e>
    18fa:	04 c0       	rjmp	.+8      	; 0x1904 <vfprintf+0x328>
    18fc:	1e 15       	cp	r17, r14
    18fe:	10 f4       	brcc	.+4      	; 0x1904 <vfprintf+0x328>
    1900:	e1 1a       	sub	r14, r17
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <vfprintf+0x32a>
    1904:	ee 24       	eor	r14, r14
    1906:	84 fe       	sbrs	r8, 4
    1908:	0f c0       	rjmp	.+30     	; 0x1928 <vfprintf+0x34c>
    190a:	80 e3       	ldi	r24, 0x30	; 48
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	b3 01       	movw	r22, r6
    1910:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <fputc>
    1914:	82 fe       	sbrs	r8, 2
    1916:	1f c0       	rjmp	.+62     	; 0x1956 <vfprintf+0x37a>
    1918:	81 fe       	sbrs	r8, 1
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <vfprintf+0x346>
    191c:	88 e5       	ldi	r24, 0x58	; 88
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	10 c0       	rjmp	.+32     	; 0x1942 <vfprintf+0x366>
    1922:	88 e7       	ldi	r24, 0x78	; 120
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0d c0       	rjmp	.+26     	; 0x1942 <vfprintf+0x366>
    1928:	c4 01       	movw	r24, r8
    192a:	86 78       	andi	r24, 0x86	; 134
    192c:	90 70       	andi	r25, 0x00	; 0
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	91 f0       	breq	.+36     	; 0x1956 <vfprintf+0x37a>
    1932:	81 fc       	sbrc	r8, 1
    1934:	02 c0       	rjmp	.+4      	; 0x193a <vfprintf+0x35e>
    1936:	80 e2       	ldi	r24, 0x20	; 32
    1938:	01 c0       	rjmp	.+2      	; 0x193c <vfprintf+0x360>
    193a:	8b e2       	ldi	r24, 0x2B	; 43
    193c:	07 fd       	sbrc	r16, 7
    193e:	8d e2       	ldi	r24, 0x2D	; 45
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	b3 01       	movw	r22, r6
    1944:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <fputc>
    1948:	06 c0       	rjmp	.+12     	; 0x1956 <vfprintf+0x37a>
    194a:	80 e3       	ldi	r24, 0x30	; 48
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	b3 01       	movw	r22, r6
    1950:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <fputc>
    1954:	fa 94       	dec	r15
    1956:	df 14       	cp	r13, r15
    1958:	c0 f3       	brcs	.-16     	; 0x194a <vfprintf+0x36e>
    195a:	da 94       	dec	r13
    195c:	f2 01       	movw	r30, r4
    195e:	ed 0d       	add	r30, r13
    1960:	f1 1d       	adc	r31, r1
    1962:	80 81       	ld	r24, Z
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	b3 01       	movw	r22, r6
    1968:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <fputc>
    196c:	dd 20       	and	r13, r13
    196e:	a9 f7       	brne	.-22     	; 0x195a <vfprintf+0x37e>
    1970:	06 c0       	rjmp	.+12     	; 0x197e <vfprintf+0x3a2>
    1972:	80 e2       	ldi	r24, 0x20	; 32
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	b3 01       	movw	r22, r6
    1978:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <fputc>
    197c:	ea 94       	dec	r14
    197e:	ee 20       	and	r14, r14
    1980:	c1 f7       	brne	.-16     	; 0x1972 <vfprintf+0x396>
    1982:	40 ce       	rjmp	.-896    	; 0x1604 <vfprintf+0x28>
    1984:	f3 01       	movw	r30, r6
    1986:	86 81       	ldd	r24, Z+6	; 0x06
    1988:	97 81       	ldd	r25, Z+7	; 0x07
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <vfprintf+0x3b4>
    198c:	8f ef       	ldi	r24, 0xFF	; 255
    198e:	9f ef       	ldi	r25, 0xFF	; 255
    1990:	2d 96       	adiw	r28, 0x0d	; 13
    1992:	e2 e1       	ldi	r30, 0x12	; 18
    1994:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__epilogue_restores__>

00001998 <strnlen_P>:
    1998:	fc 01       	movw	r30, r24
    199a:	05 90       	lpm	r0, Z+
    199c:	61 50       	subi	r22, 0x01	; 1
    199e:	70 40       	sbci	r23, 0x00	; 0
    19a0:	01 10       	cpse	r0, r1
    19a2:	d8 f7       	brcc	.-10     	; 0x199a <strnlen_P+0x2>
    19a4:	80 95       	com	r24
    19a6:	90 95       	com	r25
    19a8:	8e 0f       	add	r24, r30
    19aa:	9f 1f       	adc	r25, r31
    19ac:	08 95       	ret

000019ae <strnlen>:
    19ae:	fc 01       	movw	r30, r24
    19b0:	61 50       	subi	r22, 0x01	; 1
    19b2:	70 40       	sbci	r23, 0x00	; 0
    19b4:	01 90       	ld	r0, Z+
    19b6:	01 10       	cpse	r0, r1
    19b8:	d8 f7       	brcc	.-10     	; 0x19b0 <strnlen+0x2>
    19ba:	80 95       	com	r24
    19bc:	90 95       	com	r25
    19be:	8e 0f       	add	r24, r30
    19c0:	9f 1f       	adc	r25, r31
    19c2:	08 95       	ret

000019c4 <strrev>:
    19c4:	dc 01       	movw	r26, r24
    19c6:	fc 01       	movw	r30, r24
    19c8:	67 2f       	mov	r22, r23
    19ca:	71 91       	ld	r23, Z+
    19cc:	77 23       	and	r23, r23
    19ce:	e1 f7       	brne	.-8      	; 0x19c8 <strrev+0x4>
    19d0:	32 97       	sbiw	r30, 0x02	; 2
    19d2:	04 c0       	rjmp	.+8      	; 0x19dc <strrev+0x18>
    19d4:	7c 91       	ld	r23, X
    19d6:	6d 93       	st	X+, r22
    19d8:	70 83       	st	Z, r23
    19da:	62 91       	ld	r22, -Z
    19dc:	ae 17       	cp	r26, r30
    19de:	bf 07       	cpc	r27, r31
    19e0:	c8 f3       	brcs	.-14     	; 0x19d4 <strrev+0x10>
    19e2:	08 95       	ret

000019e4 <fputc>:
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	8c 01       	movw	r16, r24
    19ee:	eb 01       	movw	r28, r22
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	81 ff       	sbrs	r24, 1
    19f4:	1b c0       	rjmp	.+54     	; 0x1a2c <fputc+0x48>
    19f6:	82 ff       	sbrs	r24, 2
    19f8:	0d c0       	rjmp	.+26     	; 0x1a14 <fputc+0x30>
    19fa:	2e 81       	ldd	r18, Y+6	; 0x06
    19fc:	3f 81       	ldd	r19, Y+7	; 0x07
    19fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1a00:	9d 81       	ldd	r25, Y+5	; 0x05
    1a02:	28 17       	cp	r18, r24
    1a04:	39 07       	cpc	r19, r25
    1a06:	64 f4       	brge	.+24     	; 0x1a20 <fputc+0x3c>
    1a08:	e8 81       	ld	r30, Y
    1a0a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a0c:	01 93       	st	Z+, r16
    1a0e:	f9 83       	std	Y+1, r31	; 0x01
    1a10:	e8 83       	st	Y, r30
    1a12:	06 c0       	rjmp	.+12     	; 0x1a20 <fputc+0x3c>
    1a14:	e8 85       	ldd	r30, Y+8	; 0x08
    1a16:	f9 85       	ldd	r31, Y+9	; 0x09
    1a18:	80 2f       	mov	r24, r16
    1a1a:	09 95       	icall
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	31 f4       	brne	.+12     	; 0x1a2c <fputc+0x48>
    1a20:	8e 81       	ldd	r24, Y+6	; 0x06
    1a22:	9f 81       	ldd	r25, Y+7	; 0x07
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	9f 83       	std	Y+7, r25	; 0x07
    1a28:	8e 83       	std	Y+6, r24	; 0x06
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <fputc+0x4c>
    1a2c:	0f ef       	ldi	r16, 0xFF	; 255
    1a2e:	1f ef       	ldi	r17, 0xFF	; 255
    1a30:	c8 01       	movw	r24, r16
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	08 95       	ret

00001a3c <__ultoa_invert>:
    1a3c:	fa 01       	movw	r30, r20
    1a3e:	aa 27       	eor	r26, r26
    1a40:	28 30       	cpi	r18, 0x08	; 8
    1a42:	51 f1       	breq	.+84     	; 0x1a98 <__ultoa_invert+0x5c>
    1a44:	20 31       	cpi	r18, 0x10	; 16
    1a46:	81 f1       	breq	.+96     	; 0x1aa8 <__ultoa_invert+0x6c>
    1a48:	e8 94       	clt
    1a4a:	6f 93       	push	r22
    1a4c:	6e 7f       	andi	r22, 0xFE	; 254
    1a4e:	6e 5f       	subi	r22, 0xFE	; 254
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	8f 4f       	sbci	r24, 0xFF	; 255
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	af 4f       	sbci	r26, 0xFF	; 255
    1a58:	b1 e0       	ldi	r27, 0x01	; 1
    1a5a:	3e d0       	rcall	.+124    	; 0x1ad8 <__ultoa_invert+0x9c>
    1a5c:	b4 e0       	ldi	r27, 0x04	; 4
    1a5e:	3c d0       	rcall	.+120    	; 0x1ad8 <__ultoa_invert+0x9c>
    1a60:	67 0f       	add	r22, r23
    1a62:	78 1f       	adc	r23, r24
    1a64:	89 1f       	adc	r24, r25
    1a66:	9a 1f       	adc	r25, r26
    1a68:	a1 1d       	adc	r26, r1
    1a6a:	68 0f       	add	r22, r24
    1a6c:	79 1f       	adc	r23, r25
    1a6e:	8a 1f       	adc	r24, r26
    1a70:	91 1d       	adc	r25, r1
    1a72:	a1 1d       	adc	r26, r1
    1a74:	6a 0f       	add	r22, r26
    1a76:	71 1d       	adc	r23, r1
    1a78:	81 1d       	adc	r24, r1
    1a7a:	91 1d       	adc	r25, r1
    1a7c:	a1 1d       	adc	r26, r1
    1a7e:	20 d0       	rcall	.+64     	; 0x1ac0 <__ultoa_invert+0x84>
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <__ultoa_invert+0x48>
    1a82:	68 94       	set
    1a84:	3f 91       	pop	r19
    1a86:	2a e0       	ldi	r18, 0x0A	; 10
    1a88:	26 9f       	mul	r18, r22
    1a8a:	11 24       	eor	r1, r1
    1a8c:	30 19       	sub	r19, r0
    1a8e:	30 5d       	subi	r19, 0xD0	; 208
    1a90:	31 93       	st	Z+, r19
    1a92:	de f6       	brtc	.-74     	; 0x1a4a <__ultoa_invert+0xe>
    1a94:	cf 01       	movw	r24, r30
    1a96:	08 95       	ret
    1a98:	46 2f       	mov	r20, r22
    1a9a:	47 70       	andi	r20, 0x07	; 7
    1a9c:	40 5d       	subi	r20, 0xD0	; 208
    1a9e:	41 93       	st	Z+, r20
    1aa0:	b3 e0       	ldi	r27, 0x03	; 3
    1aa2:	0f d0       	rcall	.+30     	; 0x1ac2 <__ultoa_invert+0x86>
    1aa4:	c9 f7       	brne	.-14     	; 0x1a98 <__ultoa_invert+0x5c>
    1aa6:	f6 cf       	rjmp	.-20     	; 0x1a94 <__ultoa_invert+0x58>
    1aa8:	46 2f       	mov	r20, r22
    1aaa:	4f 70       	andi	r20, 0x0F	; 15
    1aac:	40 5d       	subi	r20, 0xD0	; 208
    1aae:	4a 33       	cpi	r20, 0x3A	; 58
    1ab0:	18 f0       	brcs	.+6      	; 0x1ab8 <__ultoa_invert+0x7c>
    1ab2:	49 5d       	subi	r20, 0xD9	; 217
    1ab4:	31 fd       	sbrc	r19, 1
    1ab6:	40 52       	subi	r20, 0x20	; 32
    1ab8:	41 93       	st	Z+, r20
    1aba:	02 d0       	rcall	.+4      	; 0x1ac0 <__ultoa_invert+0x84>
    1abc:	a9 f7       	brne	.-22     	; 0x1aa8 <__ultoa_invert+0x6c>
    1abe:	ea cf       	rjmp	.-44     	; 0x1a94 <__ultoa_invert+0x58>
    1ac0:	b4 e0       	ldi	r27, 0x04	; 4
    1ac2:	a6 95       	lsr	r26
    1ac4:	97 95       	ror	r25
    1ac6:	87 95       	ror	r24
    1ac8:	77 95       	ror	r23
    1aca:	67 95       	ror	r22
    1acc:	ba 95       	dec	r27
    1ace:	c9 f7       	brne	.-14     	; 0x1ac2 <__ultoa_invert+0x86>
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	61 05       	cpc	r22, r1
    1ad4:	71 05       	cpc	r23, r1
    1ad6:	08 95       	ret
    1ad8:	9b 01       	movw	r18, r22
    1ada:	ac 01       	movw	r20, r24
    1adc:	0a 2e       	mov	r0, r26
    1ade:	06 94       	lsr	r0
    1ae0:	57 95       	ror	r21
    1ae2:	47 95       	ror	r20
    1ae4:	37 95       	ror	r19
    1ae6:	27 95       	ror	r18
    1ae8:	ba 95       	dec	r27
    1aea:	c9 f7       	brne	.-14     	; 0x1ade <__ultoa_invert+0xa2>
    1aec:	62 0f       	add	r22, r18
    1aee:	73 1f       	adc	r23, r19
    1af0:	84 1f       	adc	r24, r20
    1af2:	95 1f       	adc	r25, r21
    1af4:	a0 1d       	adc	r26, r0
    1af6:	08 95       	ret

00001af8 <__prologue_saves__>:
    1af8:	2f 92       	push	r2
    1afa:	3f 92       	push	r3
    1afc:	4f 92       	push	r4
    1afe:	5f 92       	push	r5
    1b00:	6f 92       	push	r6
    1b02:	7f 92       	push	r7
    1b04:	8f 92       	push	r8
    1b06:	9f 92       	push	r9
    1b08:	af 92       	push	r10
    1b0a:	bf 92       	push	r11
    1b0c:	cf 92       	push	r12
    1b0e:	df 92       	push	r13
    1b10:	ef 92       	push	r14
    1b12:	ff 92       	push	r15
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	ca 1b       	sub	r28, r26
    1b22:	db 0b       	sbc	r29, r27
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	09 94       	ijmp

00001b30 <__epilogue_restores__>:
    1b30:	2a 88       	ldd	r2, Y+18	; 0x12
    1b32:	39 88       	ldd	r3, Y+17	; 0x11
    1b34:	48 88       	ldd	r4, Y+16	; 0x10
    1b36:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b38:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b40:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b42:	b9 84       	ldd	r11, Y+9	; 0x09
    1b44:	c8 84       	ldd	r12, Y+8	; 0x08
    1b46:	df 80       	ldd	r13, Y+7	; 0x07
    1b48:	ee 80       	ldd	r14, Y+6	; 0x06
    1b4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b4c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b4e:	1b 81       	ldd	r17, Y+3	; 0x03
    1b50:	aa 81       	ldd	r26, Y+2	; 0x02
    1b52:	b9 81       	ldd	r27, Y+1	; 0x01
    1b54:	ce 0f       	add	r28, r30
    1b56:	d1 1d       	adc	r29, r1
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	ed 01       	movw	r28, r26
    1b64:	08 95       	ret

00001b66 <_exit>:
    1b66:	f8 94       	cli

00001b68 <__stop_program>:
    1b68:	ff cf       	rjmp	.-2      	; 0x1b68 <__stop_program>
